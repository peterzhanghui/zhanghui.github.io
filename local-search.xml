<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js手写代码系列</title>
    <link href="/2021/03/24/js%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    <url>/2021/03/24/js%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>js 中常用的一些方法的代码实现</p></blockquote><h2 id="new-操作"><a href="#new-操作" class="headerlink" title="new 操作"></a>new 操作</h2><p>引用 MDN 上的相关描述：new 关键字会进行如下的操作：</p><p>创建一个空的简单 JavaScript 对象（即{}）；<br>链接该对象（设置该对象的 constructor）到另一个对象 ；<br>将步骤 1 新创建的对象作为 this 的上下文 ；<br>如果该函数没有返回对象，则返回 this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// construct: 构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 通过Object.create创建一个空对象；</span><br>  <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);<br>  <span class="hljs-comment">// 获取第一个构造函数参数</span><br>  <span class="hljs-keyword">var</span> construct = <span class="hljs-built_in">Array</span>.prototype.shift.call(<span class="hljs-built_in">arguments</span>);<br>  res.__proto__ = construct.prototype;<br>  <span class="hljs-comment">// 使用apply执行构造函数，将构造函数的属性挂载在res上面</span><br>  <span class="hljs-keyword">var</span> conRes = construct.apply(res, <span class="hljs-built_in">arguments</span>);<br>  <span class="hljs-comment">// 判断返回类型</span><br>  <span class="hljs-keyword">return</span> conRes <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> ? conRes : res;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;not a function&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">let</span> self = <span class="hljs-built_in">this</span>;<br>      <span class="hljs-keyword">let</span> args = [...arguments].slice(<span class="hljs-number">1</span>);<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fn</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>      Fn.prototype = <span class="hljs-built_in">this</span>.prototype;<br>      <span class="hljs-keyword">let</span> bound = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> res = [...args, ...arguments]; <span class="hljs-comment">//bind传递的参数和函数调用时传递的参数拼接</span><br>        context = <span class="hljs-built_in">this</span> <span class="hljs-keyword">instanceof</span> Fn ? <span class="hljs-built_in">this</span> : context || <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">return</span> self.apply(context, res);<br>      &#125;; <span class="hljs-comment">//原型链</span><br>      bound.prototype = <span class="hljs-keyword">new</span> Fn();<br>      <span class="hljs-keyword">return</span> bound;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><p>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>   <span class="hljs-keyword">let</span> oo = &#123;&#125;;<br>   oo.__proto__ = obj;<br>    <span class="hljs-keyword">return</span> oo;<br>&#125;<br>因为__proto__从web标准中删除，所以第二种更好<br><br><span class="hljs-function"><span class="hljs-title">funciton</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fn</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    Fn.prototype = obj;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Fn()<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文看懂js中falsy值的比较</title>
    <link href="/2021/03/21/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82js%E4%B8%ADfalsy%E5%80%BC%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <url>/2021/03/21/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82js%E4%B8%ADfalsy%E5%80%BC%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<blockquote><p>面试中的笔试题经常有碰到 js 中假值的比较，其实主要考察的是 js 中在非全等情况下，比较的一个类型隐式转换问题</p></blockquote><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>js 中共有 8 个 falsy 值, 分别为 false, 0, 0n, -0, NaN, ‘’, null, undefined 还有 js 中易混的空数组和控对象。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-comment">&lt;!-- 首先罗列所有易混的值 几个数字0 的转换表现一致所以保留一个 --&gt;</span></span><br><span class="xml">let falsyArr = [&#x27;&#x27;, false, 0, null, undefined, NaN, [], &#123;&#125;];</span><br><br><span class="xml">for (let i =0 ; i &lt; falsyArr.length; i ++) &#123;</span><br><span class="xml">    let result = &#123;&#125;;</span><br><span class="xml">    for (let j =0 ; j &lt; falsyArr.length; j ++)&#123;</span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 不需要和自身对比，过滤 --&gt;</span></span><br><span class="xml">        if(i != j) result[falsyArr[j]] = (falsyArr[i] == falsyArr[j]);</span><br><span class="xml">    &#125;</span><br><span class="xml">    console.log(`和$&#123;falsyArr[i]&#125;的对比结果如下\n`)</span><br><span class="xml">    console.table(result)</span><br><span class="xml">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/img/%E5%AF%B9%E6%AF%94%E6%B5%81%E7%A8%8B%E5%9B%BE.webp" alt="图片来自掘金小册-前端面试之道"></p><p>根据输出结果可以得到以下结论：</p><ol><li>[] 对比时会转化为空字符串 ‘’</li><li>{} 对比会转化为 ‘[object Object]’ (<a href="https://juejin.cn/post/6844903555548053511">JavaScript 对象转换到基本类型值算法 ToPrimitive</a>)</li><li>NaN, {} 和任何值比较都为 false</li><li>null 和 undefined 除了 null == undefined 为 true 其他都是 false （js 规范中提到，在比较相等性之前不能将 null 和 undefined 转化为其他值，并且规定两者相等，都表示无效的值）</li><li>‘’ 和 [],表现一致，和数字和 false 比较都会转化为数字 0，结果为 true，其他为 false</li><li>NaN 不管是不是全等和自身相比都为 false</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现继承的方式和优缺点</title>
    <link href="/2021/03/20/js%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <url>/2021/03/20/js%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-原型继承"><a href="#一、-原型继承" class="headerlink" title="一、 原型继承"></a>一、 原型继承</h2><p>实现的核心代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Child</span>.</span></span>prototype = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Parent()</span>;<br><br>var child1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Child()</span>;<br></code></pre></td></tr></table></figure><p>缺点：</p><ol><li>引用类型的属性被所有实例共享</li><li>创建实例时不能向 parent 传参</li></ol><h2 id="二、构造函数继承"><a href="#二、构造函数继承" class="headerlink" title="二、构造函数继承"></a>二、构造函数继承</h2><p>在子类构造函数中调用父类的构造函数，相当于在新对象上，运行了父类的所有初始化代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.names = [<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;daisy&#x27;</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params"></span>) </span>&#123;<br>    Parent.call(<span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br><br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>避免了引用类型的属性被所有实例共享</li><li>可以在 Child 中向 Parent 传参</li></ol><p>缺点：</p><ol><li>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</li><li>只能继承父类私有方法和属性，原型链中的无法继承。</li></ol><h2 id="三、组合继承"><a href="#三、组合继承" class="headerlink" title="三、组合继承"></a>三、组合继承</h2><p>结合原型继承和构造函数继承</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><br>Parent.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br><br>    Parent.call(<span class="hljs-keyword">this</span>, name);<br><br>    <span class="hljs-keyword">this</span>.age = age;<br><br>&#125;<br><br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br>Child.prototype.constructor = Child;<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br></code></pre></td></tr></table></figure><p>缺点：会调用两次父构造函数，在 call()方法和 Child.prototype = new Parent()两次都调用了父级的构造函数，造成了不必要的性能浪费</p><h2 id="四、寄生式继承"><a href="#四、寄生式继承" class="headerlink" title="四、寄生式继承"></a>四、寄生式继承</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createObj</span> (<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> clone = <span class="hljs-built_in">Object</span>.create(o);<br>    clone.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> clone;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p><h2 id="五、寄生组合式继承"><a href="#五、寄生组合式继承" class="headerlink" title="五、寄生组合式继承"></a>五、寄生组合式继承</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><br>Parent.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br>    Parent.call(<span class="hljs-keyword">this</span>, name);<br>    <span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-comment">// 关键的三步</span><br><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><br>F.prototype = Parent.prototype;<br><br>Child.prototype = <span class="hljs-keyword">new</span> F();<br><br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>最佳的继承实现 能够正常使用 instanceof 和 isPrototypeOf</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>child instanceof Parent</p><p>运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</p><h3 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title="isPrototypeOf"></a>isPrototypeOf</h3><p>用于测试一个对象(Parent)是否存在于另一个对象(child)的原型链上<br>Parent.prototype.isPrototypeOf(child)</p><h3 id="ES6-中的-extends"><a href="#ES6-中的-extends" class="headerlink" title="ES6 中的 extends"></a>ES6 中的 extends</h3><p>ES6 中的 extends 继承就是类似寄生组合式继承的实现方式</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数链式调用</title>
    <link href="/2021/03/12/%E5%87%BD%E6%95%B0%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    <url>/2021/03/12/%E5%87%BD%E6%95%B0%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>编写代码，满足以下条件：<br>（1）Hero(“37er”);执行结果为 Hi! This is 37er<br>（2）Hero(“37er”).kill(1).recover(30);执行结果为 Hi! This is 37er Kill 1 bug Recover 30 bloods<br>（3）Hero(“37er”).sleep(10).kill(2)执行结果为 Hi! This is 37er //等待 10s 后 Kill 2 bugs<br>//注意为 bugs （双斜线后的为提示信息，不需要打印）</p></blockquote><p>分析题目，主要考察函数的链式调用如何实现。实现代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hero</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> o = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);<br>    o.name  = name;<br>    o.time = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">`Hi! This is <span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br>    <span class="hljs-built_in">console</span>.log(result);<br>    o.kill = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>)</span>&#123;<br><br>        <span class="hljs-keyword">if</span> (o.time) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Kill <span class="hljs-subst">$&#123;num&#125;</span> bug<span class="hljs-subst">$&#123;num &gt; <span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>`</span>);<br>            &#125;, o.time * <span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Kill <span class="hljs-subst">$&#123;num&#125;</span> bug`</span>);<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result = (!o.time ? result : <span class="hljs-string">&#x27;&#x27;</span> )+ <span class="hljs-string">` Kill <span class="hljs-subst">$&#123;num&#125;</span> bug<span class="hljs-subst">$&#123;num &gt; <span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>`</span>;<br>                <span class="hljs-built_in">console</span>.log(result);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;;<br>    o.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">timer</span>) </span>&#123;<br>        o.time = timer;<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;;<br>    o.reverse = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">timer</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Recover <span class="hljs-subst">$&#123;timer&#125;</span> bloods`</span>);<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br><br>&lt;!-- 测试代码 --&gt;<br><span class="hljs-comment">// Hero(&quot;37er&quot;);</span><br><span class="hljs-comment">// Hero(&quot;37er&quot;).kill(1).reverse(30)</span><br>Hero(<span class="hljs-string">&quot;37er&quot;</span>).sleep(<span class="hljs-number">2</span>).kill(<span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>链式调用的核心代码就是 return o;。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typeScript文件保存时自动编译</title>
    <link href="/2021/02/14/typeScript%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/"/>
    <url>/2021/02/14/typeScript%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>typeScript 文件保存时自动编译，官网教程中的 提到的 vsCode 插件 atom-typescript，在 vsCode 中搜索没找到。</p></blockquote><h2 id="1、全局安装-typeScript"><a href="#1、全局安装-typeScript" class="headerlink" title="1、全局安装 typeScript"></a>1、全局安装 typeScript</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g typescript<br></code></pre></td></tr></table></figure><h2 id="2、手动编译"><a href="#2、手动编译" class="headerlink" title="2、手动编译"></a>2、手动编译</h2><p>创建完成 ts 文件后运行 tsc test.ts，会在当前目录下生成同名的 js 文件。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">tsc <span class="hljs-keyword">test</span>.ts<br></code></pre></td></tr></table></figure><h2 id="3、自动编译"><a href="#3、自动编译" class="headerlink" title="3、自动编译"></a>3、自动编译</h2><h3 id="a、生成配置-ts-文件"><a href="#a、生成配置-ts-文件" class="headerlink" title="a、生成配置 ts 文件"></a>a、生成配置 ts 文件</h3><p>在项目根目录生成 tsconfig.json 文件，可以修改相关 ts 配置，设置编译后的 js 文件目录</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">tsc --<span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><h3 id="b、在-vsCode-中配置"><a href="#b、在-vsCode-中配置" class="headerlink" title="b、在 vsCode 中配置"></a>b、在 vsCode 中配置</h3><p>终端 -&gt; Run Task -&gt; typescript -&gt; tsc: watch - tsconfig.json</p><h3 id="c、直接在命令行监听修改，自动更新"><a href="#c、直接在命令行监听修改，自动更新" class="headerlink" title="c、直接在命令行监听修改，自动更新"></a>c、直接在命令行监听修改，自动更新</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tsc -w</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深浅拷贝</title>
    <link href="/2021/02/13/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/02/13/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目中经常会遇到一些场景比如说从后端获取的数据，前端保存一份，用户需要修改编辑，如果页面需要同时展示两份数据的话，这时候前端就需要同时保留两份独立的数据，就需要用到拷贝，如果涉及到多层级的对象修改，就需要用到深拷贝。首先说一下几个易混的概念。</p></blockquote><h2 id="赋值，浅拷贝，深拷贝"><a href="#赋值，浅拷贝，深拷贝" class="headerlink" title="赋值，浅拷贝，深拷贝"></a>赋值，浅拷贝，深拷贝</h2><ol><li> 值类型的数据 赋值是值赋值， 引用类型的数据（数组，对象） 赋值是地址赋 值，修改目标对象，来源对象也会更改</li><li> 浅拷贝 如果来源对象的属性都是值类型的数据，修改目标对象，来源对象不会更改。如果属性值是引用类型的数据则需要使用深拷贝（遍历）</li><li> JSON.parse( JSON.stringify() ) 序列化和反序列 JSON 在执行字符串化的这个过程时，会先进行一个 JSON 格式化，获得安全的 JSON 值，因此如果是非安全的 JSON 值，就会被丢弃掉。 其中 undefined、function、symbol 这三种类型的值就是非安全的（包括该对象的属性循环赋值该对象），所以格式化后，就被过滤掉了，而 set、map 这种数据格式的对象，也并没有被正确处理，而是处理成了一个空对象</li><li> object.assgn() 属于浅拷贝</li></ol><h2 id="浅拷贝实现"><a href="#浅拷贝实现" class="headerlink" title="浅拷贝实现"></a>浅拷贝实现</h2><p>es6 中的解构赋值可以实现</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">let</span> obj1 = &#123; <span class="hljs-params">...</span>obj&#125;<br></code></pre></td></tr></table></figure><h2 id="深拷贝实现"><a href="#深拷贝实现" class="headerlink" title="深拷贝实现"></a>深拷贝实现</h2><ol><li>如果对象中属性值不涉及到，函数、Data、以及正则表达式，直接使用 JSON 转换</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> obj1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(obj))<br></code></pre></td></tr></table></figure><ol start="2"><li>涉及复杂属性值的可以借助循环遍历逐层赋值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method    </span>深度克隆</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param     <span class="hljs-type">&#123;obj&#125;</span> </span>source 来源数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return    <span class="hljs-type">&#123;obj&#125;</span> </span>target 目标对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">source</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (source == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> source !== <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-keyword">return</span> source;<br>  <span class="hljs-comment">// 如果是正则</span><br>  <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">RegExp</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(source);<br>  &#125;<br>   <span class="hljs-comment">// 如果是日期</span><br>   <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(source);<br>  &#125;<br><br>  <span class="hljs-comment">// 不直接创建空对象的目的：克隆的结果和之前保持相同的所属类</span><br><br>  <span class="hljs-keyword">var</span> target = dataType(source) == <span class="hljs-string">&quot;Object&quot;</span> ? <span class="hljs-keyword">new</span> source.constructor : [];<br>  <span class="hljs-comment">// 遍历source的所有可枚举属性</span><br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> source) &#123;<br><br>    <span class="hljs-keyword">if</span> (<br>      dataType(source[key]) == <span class="hljs-string">&quot;Object&quot;</span> ||<br>      dataType(source[key]) == <span class="hljs-string">&quot;Array&quot;</span><br>    ) &#123;<br>      target[key] = deepClone(source[key]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      target[key] = source[key];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> target;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dataType</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(data).slice(<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统计html中出现最多的标签</title>
    <link href="/2021/01/27/%E7%BB%9F%E8%AE%A1html%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E6%A0%87%E7%AD%BE/"/>
    <url>/2021/01/27/%E7%BB%9F%E8%AE%A1html%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="查找当前页面中出现最多的-html-标签"><a href="#查找当前页面中出现最多的-html-标签" class="headerlink" title="查找当前页面中出现最多的 html 标签"></a>查找当前页面中出现最多的 html 标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> maxBy = <span class="hljs-function">(<span class="hljs-params">list, keyBy</span>) =&gt;</span> list.reduce(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> keyBy(x) &gt; keyBy(y) ? x : y)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFrequentTag</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> tags = [...document.querySelectorAll(<span class="hljs-string">&#x27;*&#x27;</span>)].map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.tagName).reduce(<span class="hljs-function">(<span class="hljs-params">o, tag</span>) =&gt;</span> &#123;<br>    o[tag] = o[tag] ? o[tag] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> o<br>  &#125;, &#123;&#125;)<br>  <span class="hljs-keyword">return</span> maxBy(<span class="hljs-built_in">Object</span>.entries(tags), <span class="hljs-function"><span class="hljs-params">tag</span> =&gt;</span> tag[<span class="hljs-number">1</span>])<br>&#125;<br><br></code></pre></td></tr></table></figure><p>转载文章：<br>(原文连接)[<a href="https://juejin.cn/post/6922229465468633095]">https://juejin.cn/post/6922229465468633095]</a></p>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2021/01/25/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/01/25/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>快速排序又叫快排，和冒泡排序类似，都是通过元素的比较和交换位置来排序，本文记录一下快排的实现方法，希望对大家有所帮助</p></blockquote><h2 id="一、-基本思想"><a href="#一、-基本思想" class="headerlink" title="一、 基本思想"></a>一、 基本思想</h2><p>快排采用分治的思想，每个循环将数列依据选定的基准，分成大小两份。主要实现思路 选择基准元素，还有元素的交换。<br><a href="https://visualgo.net/zh/sorting">这里</a>有动画示例很好理解。</p><h2 id="二、-代码实现"><a href="#二、-代码实现" class="headerlink" title="二、 代码实现"></a>二、 代码实现</h2><h3 id="a、双边循环"><a href="#a、双边循环" class="headerlink" title="a、双边循环"></a>a、双边循环</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs coq"><br>/**<br>    * @method    快排<br>    * @param     &#123;参数类型&#125; 参数名 参数说明<br>    * @<span class="hljs-keyword">return</span>    &#123;返回值类型&#125; 返回值说明<br>    */<br>    <span class="hljs-keyword">let</span> arrgo = [<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>];<br>    function quickSort(arr, startIndex, endIndex) &#123;<br>        <span class="hljs-keyword">if</span> (startIndex&gt;=endIndex) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> pivotIndex = partition(arr, startIndex, endIndex);<br><br>        quickSort(arr, startIndex, pivotIndex<span class="hljs-number">-1</span>)<br>        quickSort(arr, pivotIndex+<span class="hljs-number">1</span>, endIndex)<br><br>    &#125;<br>    /**<br>    * @method   分组<br>    * @param     &#123;参数类型&#125; 参数名 参数说明<br>    * @<span class="hljs-keyword">return</span>    &#123;返回值类型&#125; 返回值说明<br>    */<br>    function partition(arr, startIndex, endIndex)&#123;<br>        <span class="hljs-keyword">let</span> pivot = arr[startIndex];<br>        <span class="hljs-keyword">let</span> <span class="hljs-built_in">left</span> = startIndex;<br>        <span class="hljs-keyword">let</span> <span class="hljs-built_in">right</span> = endIndex;<br>        while(<span class="hljs-built_in">left</span> != <span class="hljs-built_in">right</span>) &#123;<br>            while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span> &amp;&amp; arr[<span class="hljs-built_in">left</span>] &lt;= pivot)&#123;<br>                <span class="hljs-built_in">left</span>++<br>            &#125;<br>            while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span> &amp;&amp; arr[<span class="hljs-built_in">right</span>] &gt; pivot)&#123;<br>                <span class="hljs-built_in">right</span>--<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">left</span> &lt; <span class="hljs-built_in">right</span>) &#123;<br>                <span class="hljs-keyword">let</span> temp = arr[<span class="hljs-built_in">right</span>];<br>                arr[<span class="hljs-built_in">right</span>] = arr[<span class="hljs-built_in">left</span>];<br>                arr[<span class="hljs-built_in">left</span>]= temp;<br>            &#125;<br><br>        &#125;<br>        arr[startIndex] = arr[<span class="hljs-built_in">left</span>];<br>        arr[<span class="hljs-built_in">left</span>] = pivot;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span>;<br>    &#125;<br>    quickSort(arrgo, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>)<br>    console.log(arrgo);<br></code></pre></td></tr></table></figure><h3 id="b、单边循环"><a href="#b、单边循环" class="headerlink" title="b、单边循环"></a>b、单边循环</h3><p>下面这种实现，以第一个元素为基准遍历比对，比基准小就和前面大的元素互换位置，最后最后一个交换的元素和基准交换位置，这样左边就是都比基准小的元素，右边都是比基准大的元素</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> quick<span class="hljs-constructor">Sort2(<span class="hljs-params">arr</span>, <span class="hljs-params">start</span>, <span class="hljs-params">end</span>)</span> &#123;<br>  <span class="hljs-keyword">while</span>(start &gt;= <span class="hljs-keyword">end</span>) return<br>  <span class="hljs-keyword">let</span> pivot = start,<br>  pivotVal = arr<span class="hljs-literal">[<span class="hljs-identifier">pivot</span>]</span>,<br>  idx = pivot + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">while</span> (idx &lt;= <span class="hljs-keyword">end</span>) &#123;<br>    <span class="hljs-keyword">if</span> (arr<span class="hljs-literal">[<span class="hljs-identifier">idx</span>]</span> &lt; pivotVal) &#123;<br>      pivot ++<br>      <span class="hljs-keyword">if</span> (arr<span class="hljs-literal">[<span class="hljs-identifier">pivot</span>]</span> != arr<span class="hljs-literal">[<span class="hljs-identifier">idx</span>]</span>) &#123;<br>        <span class="hljs-literal">[<span class="hljs-identifier">arr</span>[<span class="hljs-identifier">pivot</span>]</span>, arr<span class="hljs-literal">[<span class="hljs-identifier">idx</span>]</span>] = <span class="hljs-literal">[<span class="hljs-identifier">arr</span>[<span class="hljs-identifier">idx</span>]</span>, arr<span class="hljs-literal">[<span class="hljs-identifier">pivot</span>]</span>]<br>      &#125;<br>    &#125;<br>    idx ++<br>  &#125;<br>  <span class="hljs-literal">[<span class="hljs-identifier">arr</span>[<span class="hljs-identifier">pivot</span>]</span>, arr<span class="hljs-literal">[<span class="hljs-identifier">start</span>]</span>] = <span class="hljs-literal">[<span class="hljs-identifier">arr</span>[<span class="hljs-identifier">start</span>]</span>, arr<span class="hljs-literal">[<span class="hljs-identifier">pivot</span>]</span>]<br>  quick<span class="hljs-constructor">Sort2(<span class="hljs-params">arr</span>, <span class="hljs-params">pivot</span> + 1, <span class="hljs-params">end</span>)</span><br>  quick<span class="hljs-constructor">Sort2(<span class="hljs-params">arr</span>, 0, <span class="hljs-params">pivot</span> - 1)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="c、上面的方法排序结果对原数组有影响，下面的排序会从新生成一个数组对原数组没影响。"><a href="#c、上面的方法排序结果对原数组有影响，下面的排序会从新生成一个数组对原数组没影响。" class="headerlink" title="c、上面的方法排序结果对原数组有影响，下面的排序会从新生成一个数组对原数组没影响。"></a>c、上面的方法排序结果对原数组有影响，下面的排序会从新生成一个数组对原数组没影响。</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript">   * <span class="hljs-meta">@method</span>    快排<br>    * <span class="hljs-meta">@param</span>     &#123;参数类型&#125; 参数名 参数说明<br>    * <span class="hljs-meta">@return</span>    &#123;返回值类型&#125; 返回值说明<br>    */<br>    <span class="hljs-keyword">let</span> arrgo = [<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quicksort</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> tmp_array = array.slice(<span class="hljs-number">0</span>), result,<br>  quickSort = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>　　<span class="hljs-keyword">if</span> (arr.length &lt;= <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> arr; &#125;<br>　　<span class="hljs-keyword">var</span> pivotIndex = <span class="hljs-built_in">Math</span>.floor(arr.length / <span class="hljs-number">2</span>);<br>　　<span class="hljs-keyword">var</span> pivot = arr.splice(pivotIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>　　<span class="hljs-keyword">var</span> left = [];<br>　　<span class="hljs-keyword">var</span> right = [];<br>　　<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>　　　　<span class="hljs-keyword">if</span> (arr[i] &lt; pivot) &#123;<br>　　　　　　left.push(arr[i]);<br>　　　　&#125; <span class="hljs-keyword">else</span> &#123;<br>　　　　　　right.push(arr[i]);<br>　　　　&#125;<br>　　&#125;<br>　　<span class="hljs-keyword">return</span> quickSort(left).concat([pivot], quickSort(right));<br>  &#125;;<br>  result = quickSort(tmp_array);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">let</span> resultArr = quicksort(arrgo);<br><span class="hljs-built_in">console</span>.log(arrgo);<br><span class="hljs-built_in">console</span>.log(resultArr);<br></code></pre></td></tr></table></figure><h2 id="三、优化方式"><a href="#三、优化方式" class="headerlink" title="三、优化方式"></a>三、优化方式</h2><p>对于基准的选择有一种优化方式，为三数取中，这样可以更利于数组均等的拆分，可以避免已经有序的数据，减少执行次数。代码实现如下</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs coq">function getmid(arr, <span class="hljs-built_in">left</span>, <span class="hljs-built_in">right</span>) &#123;<br>     <span class="hljs-keyword">if</span> (arr.length &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>];<br>     <span class="hljs-keyword">let</span> mid = Math.floor(<span class="hljs-built_in">left</span> + (<span class="hljs-built_in">right</span>-<span class="hljs-built_in">left</span>)/<span class="hljs-number">2</span>);<br>     // <span class="hljs-keyword">let</span> temp =[arr[<span class="hljs-built_in">left</span>]];<br>     <span class="hljs-keyword">if</span> (arr[<span class="hljs-built_in">left</span>] &gt; arr[mid]) &#123;<br>       // arr.push(arr[mid])<br>       <span class="hljs-keyword">if</span> (arr[<span class="hljs-built_in">left</span>] &gt; arr[<span class="hljs-built_in">right</span>]) &#123;<br>         <span class="hljs-keyword">if</span> (arr[mid] &gt; arr[<span class="hljs-built_in">right</span>])&#123;<br>           <span class="hljs-keyword">return</span> mid;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-built_in">right</span>;<br>         &#125;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span><br>       &#125;<br><br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">if</span> (arr[<span class="hljs-built_in">left</span>] &gt; arr[<span class="hljs-built_in">right</span>]) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span><br><br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">if</span> (arr[mid] &gt; arr[<span class="hljs-built_in">right</span>])&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-built_in">right</span>;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> mid;<br>         &#125;<br>       &#125;<br>     &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>对比冒泡排序一轮只能挑选一个元素冒泡到数列的一端，快排使用递归的方式，每轮挑选一个基准元素，然后遍历数列比基准小的放左边，大的放右边，时间复杂度为 O(nlogn)，如果数列已经有序，最差的时间复杂度为 O(n^2)</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序及优化</title>
    <link href="/2021/01/23/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <url>/2021/01/23/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>冒泡排序是我们会经常用到的排序方法，本文记录一下冒泡排序及优化的实现方法，希望对大家有所帮助</p></blockquote><h2 id="一、-前情提要"><a href="#一、-前情提要" class="headerlink" title="一、 前情提要"></a>一、 前情提要</h2><blockquote><p>js 中可以使用数组的原生方法 sort 来进行排序。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的</p></blockquote><p>直接使用 sort，元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>];<br>arr.sort()<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [1, 10, 2, 4, 8]</span><br></code></pre></td></tr></table></figure><p>会发现，上面的结果中，10 在 2 的前面，不过 sort 方法有一个可选参数可以传入一个函数，解决数字类型数组的排序问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareNumbers</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b;<br>&#125;<br><br>arr.sort(compareNumbers)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [1, 2, 4, 8, 10]</span><br></code></pre></td></tr></table></figure><h2 id="二、冒泡排序实现-sort"><a href="#二、冒泡排序实现-sort" class="headerlink" title="二、冒泡排序实现 sort"></a>二、冒泡排序实现 sort</h2><h3 id="1、基础实现"><a href="#1、基础实现" class="headerlink" title="1、基础实现"></a>1、基础实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>];<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sort</span> (<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>; j &lt; arr.length-i-<span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">let</span> tmp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = tmp;<br>            &#125;<br>            count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br><span class="hljs-keyword">let</span> result = sort(arr);<br><span class="hljs-built_in">console</span>.log(count) <span class="hljs-comment">// 66</span><br><span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// [1, 2, 4, 6, 8, 9, 10, 10, 20, 21, 22, 23]</span><br><br></code></pre></td></tr></table></figure><p>n 为数组长度，执行次数为 n(n-1)/2，时间复杂度为 O(n^2)</p><h3 id="2、增加有序标示位"><a href="#2、增加有序标示位" class="headerlink" title="2、增加有序标示位"></a>2、增加有序标示位</h3><p>基础实现中，如果在进行到最后一轮循环之前数组已经有顺序，但是排序算法还是会执行后面的循环，所以我们可以添加一个标示，如果内层循环，没有数据交换说明已经有序，可以提前退出循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>];<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sort</span> (<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">let</span> isSorted = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 有序标记初始值为true</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>; j &lt; arr.length-i-<span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">let</span> tmp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = tmp;<br>                isSorted = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 有元素交换则数组为无序</span><br>            &#125;<br>            count++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (isSorted) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br><span class="hljs-keyword">let</span> result = sort(arr);<br><span class="hljs-built_in">console</span>.log(count) <span class="hljs-comment">// 45</span><br><span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// [1, 2, 4, 6, 8, 9, 10, 10, 20, 21, 22, 23]</span><br></code></pre></td></tr></table></figure><p>基础实现需要 66 次，如果实现有序的轮次更靠前，可以更明显。</p><h3 id="3、增加有序标示位"><a href="#3、增加有序标示位" class="headerlink" title="3、增加有序标示位"></a>3、增加有序标示位</h3><p>第二种优化，只有在全部有序的情况下才会终止循环，如果数组已经有部分有序，还是要遍历。<br>为了优化这种情况，可以添加一个有序区的标示位，记录最后一次交换元素的位置。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>];<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sort</span> (<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-comment">// 记录最后一次交换元素的位置</span><br>    <span class="hljs-keyword">let</span> lastExchangeIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 无序数列边界</span><br>    <span class="hljs-keyword">let</span> sortBorder = arr.length - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">let</span> isSorted = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 有序标记初始值为true</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>; j &lt; sortBorder; j++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">let</span> tmp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = tmp;<br>                isSorted = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 有元素交换则数组为无序</span><br>                lastExchangeIndex = j;<br>            &#125;<br>            count++;<br>        &#125;<br>        sortBorder = lastExchangeIndex<br>        <span class="hljs-keyword">if</span> (isSorted) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br><span class="hljs-keyword">let</span> result = sort(arr);<br><span class="hljs-built_in">console</span>.log(count) <span class="hljs-comment">// 29</span><br><span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">//  [1, 2, 4, 6, 8, 9, 10, 10, 20, 21, 22, 23]</span><br></code></pre></td></tr></table></figure><p>优化无止境，本文参考漫画算法中的代码实现。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>感谢各位的阅读，如有不对欢迎批评指正，共同交流。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js循环退出的方法</title>
    <link href="/2021/01/23/js%E5%BE%AA%E7%8E%AF%E9%80%80%E5%87%BA%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2021/01/23/js%E5%BE%AA%E7%8E%AF%E9%80%80%E5%87%BA%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍 js 中 循环跳出/终止的方法，希望对你有所帮助</p></blockquote><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><ul><li><p>continue</p></li><li><p>break</p></li><li><p>return</p><p>接下来，分别看看他们不同的使用场景</p></li></ul><h2 id="一、for-循环中的使用"><a href="#一、for-循环中的使用" class="headerlink" title="一、for 循环中的使用"></a>一、for 循环中的使用</h2><h3 id="continue-在-for-循环中是退出当前循环，接着执行下面的循环"><a href="#continue-在-for-循环中是退出当前循环，接着执行下面的循环" class="headerlink" title="continue 在 for 循环中是退出当前循环，接着执行下面的循环"></a>continue 在 for 循环中是退出当前循环，接着执行下面的循环</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>    <span class="hljs-keyword">if</span> (arr[i] == <span class="hljs-number">4</span>) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">console</span>.log(arr[i]) <span class="hljs-comment">// 2,6,8</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="break-在-for-循环中是退出整个循环"><a href="#break-在-for-循环中是退出整个循环" class="headerlink" title="break 在 for 循环中是退出整个循环"></a>break 在 for 循环中是退出整个循环</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>    <span class="hljs-keyword">if</span> (arr[i] == <span class="hljs-number">4</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">console</span>.log(arr[i]) <span class="hljs-comment">// 2</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="return-在-for-循环中是退出整个循环，和-break-不同的是，必须要包含在方法体中，因为-for-本身没有函数作用域，是全局作用域"><a href="#return-在-for-循环中是退出整个循环，和-break-不同的是，必须要包含在方法体中，因为-for-本身没有函数作用域，是全局作用域" class="headerlink" title="return 在 for 循环中是退出整个循环，和 break 不同的是，必须要包含在方法体中，因为 for 本身没有函数作用域，是全局作用域"></a>return 在 for 循环中是退出整个循环，和 break 不同的是，必须要包含在方法体中，因为 for 本身没有函数作用域，是全局作用域</h3><blockquote><p>for 循环 如果没有包含在方法中直接使用 return，会有报错 Uncaught SyntaxError: Illegal return statement</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>    <span class="hljs-keyword">if</span> (arr[i] == <span class="hljs-number">4</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">console</span>.log(arr[i]) <span class="hljs-comment">// 2</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="其他遍历器-终止循环的方法"><a href="#其他遍历器-终止循环的方法" class="headerlink" title="其他遍历器 终止循环的方法"></a>其他遍历器 终止循环的方法</h2><p>forEach()不支持 break 和 continue，可以用 return false 或者 return</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>].forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item == <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">console</span>.log(item) <span class="hljs-comment">// 2,6,8</span><br>&#125;)<br><br></code></pre></td></tr></table></figure><p>return 退出当前循环，执行下一个循环条件。如果想退出整个循环可以通过抛出异常的方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>].forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item == <span class="hljs-number">4</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;jump&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(item) <span class="hljs-comment">// 2</span><br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>感谢各位的阅读，如有不对欢迎批评指正，共同交流。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在互联网小厂做面试官的一些感悟</title>
    <link href="/2021/01/12/%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%B0%8F%E5%8E%82%E5%81%9A%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/"/>
    <url>/2021/01/12/%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%B0%8F%E5%8E%82%E5%81%9A%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>公司是一个初创公司，规模也不大，但是正常的人员流动，免不了需要筛选面试一些新的候选人，最近将近年底，涉及到年终奖的问题所以招聘很难，加上公司位置确实有点偏，不太有优势，所以造成了 boss 上很多已读未回的情况，一度怀疑招不到人，但是又总感觉下一个聊的人可能会成为未来的同事。整个过程还是有不少感触的，所以记录一下</p></blockquote><h2 id="招聘需求的理解"><a href="#招聘需求的理解" class="headerlink" title="招聘需求的理解"></a>招聘需求的理解</h2><blockquote><p>毕竟合适的才是最好的，理清楚自己的需求也很重要，这样选择才可以更准确、更高效</p></blockquote><p>我理解的招聘，不需要像大厂那样面试造火箭，入职拧螺丝。我们就是业务线需要（空缺一个前端开发岗），能独立完成一个项目（当然感觉这也是一句空话）具体我大概梳理了以下几点：</p><ul><li>基础扎实</li><li>公司目前用到的技术栈，可以熟练掌握</li><li>对于平常使用的技术栈，是不是有一些深入的思考</li><li>项目经验，涉及的业务场景足够丰富（pc、h5、小程序）</li><li>过往的项目，对于项目整体的了解，有没有技术驱动业务的实践</li></ul><h2 id="面试题的选择"><a href="#面试题的选择" class="headerlink" title="面试题的选择"></a>面试题的选择</h2><blockquote><p>网上有很多大厂面试题，当然也可以按需参考</p></blockquote><p>基础知识掌握，项目经验，解决问题的能力，<br>那真正的面试过程，少问一点概念性的问题，因为感觉有标准答案在，展现不了区别，比如说闭包是什么，这种。<br>更多的换成类似，从输入 url 到页面加载的整个过程，过程中可以优化的一些点，这种发散性的问题。</p><ul><li><p>还有像项目中遇到的一些难点，如何解决的</p></li><li><p>最有成就感的一个项目</p></li><li><p>包括也会问最近在学习的东西聊一聊，或者平常学习/解决问题的一些方法途径。</p></li><li><p>当然自己最近遇到的一些问题有时候也会问，看看会不会有其他更好的思路。</p></li></ul><p>就是更多的是通过一个聊天的方式去交流，在放松的状态下让对方发挥的更好，毕竟顺利啦大家以后都是同事。</p><p>当然，真正的公司工作，技术只是一部分，软实力也很重要，沟通表达能力，自信积极的状态，或者其他优势适当的展现出来都算加分项</p><h3 id="最后说一下比较忌讳的点"><a href="#最后说一下比较忌讳的点" class="headerlink" title="最后说一下比较忌讳的点"></a>最后说一下比较忌讳的点</h3><blockquote><p>本身应该是共识，但是还是有不人做的不好，所以顺便提一下。</p></blockquote><ul><li>约好的面试时间，尽量不要迟到，当然也不需要提前很早到，真有突发情况尽量提前告知，方便彼此安排时间，我认为守时是对面试最起码的尊重。</li><li>面试爽约。 没有任何说明的爽约。我还遇到一个求职者约的 3 点的面试，2 点 58 分的时候告诉我说，‘提前和你说一下，今天来不了了’（手动狗头）</li><li>公司产品完全不熟悉。简历海投是一种方式，但是到了面试环节，对公司的产品稍微了解一下还是很有必要的，通过公司的产品还是可以看出很多东西的，代码就在哪里看看也不多，说不定还能找到一些 bug，或者可以优化的点，是不是这些在面试的时候可以主动聊聊，感觉都是加分项。</li></ul><p>当然这些都是我自己的一些想法，欢迎大家有更好的想法可以一起交流。最也后祝大家可以实现薪资 double</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>生活感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuejs过滤器</title>
    <link href="/2021/01/12/vuejs%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2021/01/12/vuejs%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>vuejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js跳转页面控制打开新标签页的处理</title>
    <link href="/2021/01/12/js%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E6%8E%A7%E5%88%B6%E6%89%93%E5%BC%80%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2021/01/12/js%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E6%8E%A7%E5%88%B6%E6%89%93%E5%BC%80%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目中经常碰到列表跳详情的操作，需求想要新标签页不在当前页面，而是打开一个新的标签页</p></blockquote><p>这需求简单，直接 windows.open(url,’_blank’)搞定，测试发现</p><h3 id="问题一：如果在-ajax-异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。"><a href="#问题一：如果在-ajax-异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。" class="headerlink" title="问题一：如果在 ajax 异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。"></a>问题一：如果在 ajax 异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。</h3><p>解决方法如下：使用 a 标签模拟用户点击操作</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @method    跳转新的标签页</span><br><span class="hljs-comment">* @param     &#123;参数类型&#125; 参数名 参数说明</span><br><span class="hljs-comment">* @return    &#123;返回值类型&#125; 返回值说明</span><br><span class="hljs-comment">*/</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>prototype.$open_blank = <span class="hljs-keyword">function</span>(url) &#123;<br>  <span class="hljs-comment">//  window.open(url,&quot;_blank&quot;);</span><br>   <span class="hljs-keyword">let</span> referLink = document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">a</span>&#x27;)</span>;<br>  referLink.href = url;<br>  referLink.target = <span class="hljs-string">&quot;_blank&quot;</span>;<br>  referLink.rel=<span class="hljs-string">&quot;noopener noreferrer&quot;</span>;<br>  document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">referLink</span>)</span>;<br>  referLink.click<span class="hljs-literal">()</span>;<br>  document.body.remove<span class="hljs-constructor">Child(<span class="hljs-params">referLink</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题二：性能问题-Chrome-中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。"><a href="#问题二：性能问题-Chrome-中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。" class="headerlink" title="问题二：性能问题 Chrome 中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。"></a>问题二：性能问题 Chrome 中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。</h3><p>暂未发现解决方案。</p><h3 id="问题三：-安全问题-新开的窗口中可以通过-window-opener-location-newURL-来重写父页面的-url。所以有安全风险"><a href="#问题三：-安全问题-新开的窗口中可以通过-window-opener-location-newURL-来重写父页面的-url。所以有安全风险" class="headerlink" title="问题三： 安全问题 新开的窗口中可以通过 window.opener.location = newURL 来重写父页面的 url。所以有安全风险"></a>问题三： 安全问题 新开的窗口中可以通过 window.opener.location = newURL 来重写父页面的 url。所以有安全风险</h3><p>解决方法 ：a 标签的 rel 添加 noopener</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">referLink.rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span><span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://cloud.tencent.com/developer/article/1008860">在新窗口中打开页面？小心有坑！</a></p><p><a href="https://blog.asaki.me/2018/05/07/">打开新窗口的正确姿势</a></p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js高级程序设计第四版</title>
    <link href="/2021/01/07/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    <url>/2021/01/07/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="4-2-2-变量声明"><a href="#4-2-2-变量声明" class="headerlink" title="4.2.2 变量声明"></a>4.2.2 变量声明</h4><ol><li>var 是函数作用域声明， let、const 是块级作用域声明</li><li>let 同一作用域内不能声明两次，var 重复的会被忽略覆盖</li><li>let 适合在循环中声明迭代变量，使用 var 声明的迭代变量会泄漏到循环外部</li><li>const 被赋值为对象，应用值不能修改，但对象的键则不受限制，如果想整个对象都不能修改，可以使用 Object.freeze()</li></ol><h4 id="4-3-垃圾回收"><a href="#4-3-垃圾回收" class="headerlink" title="4.3 垃圾回收"></a>4.3 垃圾回收</h4><blockquote><p>js 最常用的垃圾回收策略是标记清理</p></blockquote><p>内存泄漏</p><blockquote><p>js 中的内存泄漏大部分是由不合理的引用导致的. 解除变量引用不仅可以消除循环引用，而且对垃圾回收也有帮助</p></blockquote><ol><li>意外声明全局变量</li><li>定时器的回调通过闭包引用外部变量</li><li>闭包</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vsCode使用技巧</title>
    <link href="/2020/12/22/vsCode%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/12/22/vsCode%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>终端使用 code . 的方式在 VSCode 中打开当前项目</p></blockquote><h2 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h2><p>直接在终端项目目录中输入</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">code</span> .<br></code></pre></td></tr></table></figure><h2 id="Mac-用户"><a href="#Mac-用户" class="headerlink" title="Mac 用户"></a>Mac 用户</h2><p>打开 VSCode 使用 shift + command +P 打开命令面板，然后输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">Install</span> ‘code&#x27; <span class="hljs-keyword">command</span> in PATH<br></code></pre></td></tr></table></figure><p>点击安装即可.</p><p>再打开终端输入 code . 即可在 VSCode 中打开当前文件夹</p>]]></content>
    
    
    
    <tags>
      
      <tag>vsCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js防止按钮重复点击</title>
    <link href="/2020/12/15/js%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/"/>
    <url>/2020/12/15/js%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>业务需求场景，项目中涉及到保存，修改数据的时候，多次点击按钮，因为数据处理需要时间，会造成重复操作的情况。</p></blockquote><h3 id="解决方案一：-表单按钮修改-disabled-属性，-或者在-js-事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开"><a href="#解决方案一：-表单按钮修改-disabled-属性，-或者在-js-事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开" class="headerlink" title="解决方案一： 表单按钮修改 disabled 属性， 或者在 js 事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开"></a>解决方案一： 表单按钮修改 disabled 属性， 或者在 js 事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">this.disabled</span> = <span class="hljs-literal">true</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="方案二：使用函数防抖（自定义，或者直接使用-lodash-的-debounce-方法）"><a href="#方案二：使用函数防抖（自定义，或者直接使用-lodash-的-debounce-方法）" class="headerlink" title="方案二：使用函数防抖（自定义，或者直接使用 lodash 的 debounce 方法）"></a>方案二：使用函数防抖（自定义，或者直接使用 lodash 的 debounce 方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> timeout = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (timeout !== <span class="hljs-literal">null</span>) <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    timeout = <span class="hljs-built_in">setTimeout</span>(fn, wait);<br>  &#125;;<br>&#125;<br> <span class="hljs-comment">// 绑定的按钮点击事件调用防抖方法</span><br> debounce(submit, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>上面的方法有一个第一次等待时间，需要优化一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">callback, wait = <span class="hljs-number">3000</span>, immediate</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> timeout,result<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;<br><br>    <span class="hljs-keyword">if</span> (timeout) <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    <span class="hljs-keyword">if</span> (immediate) &#123;<br>      <span class="hljs-comment">// 判断是否执行过</span><br>      <span class="hljs-keyword">var</span> flag = !timeout;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback.apply(context, args);<br>      &#125;, wait);<br>      <span class="hljs-keyword">if</span> (flag) callback.apply(context, args);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        callback.apply(context, args);<br>      &#125;, wait);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方案三：可以添加-loading-动画"><a href="#方案三：可以添加-loading-动画" class="headerlink" title="方案三：可以添加 loading 动画"></a>方案三：可以添加 loading 动画</h3><p>如果涉及 http 请求，可以等 http 响应开始添加 loading 动画，完成后关闭。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h5微信分享配置</title>
    <link href="/2020/12/06/h5%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/12/06/h5%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>h5 页面实现微信分享配置，可以展示配置的 title, 描述，和截图</p></blockquote><!-- ![分享配置前后对比](./img/wxShare.png "分享配置前后对比") --><p>步骤一：绑定域名<br>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS 接口安全域名”。</p><p>备注：</p><ul><li>登录后可在“开发者中心”查看对应的接口权限。</li><li>填写的域名须通过 ICP 备案的验证。</li><li>下载验证文件放到服务器项目根目录中</li></ul><p>步骤二：引入 JS 文件<br>在需要调用 JS 接口的页面引入如下 JS 文件，（支持 https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p><p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.6.0.js">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持 https）。</p><p>备注：支持使用 AMD/CMD 标准模块加载方法加载</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">script:</span> [<br>        &#123;<br>          <span class="hljs-comment">// 分享</span><br><span class="hljs-symbol">          src:</span> <span class="hljs-string">&quot;//res.wx.qq.com/open/js/jweixin-1.6.0.js&quot;</span>,<br><span class="hljs-symbol">          type:</span> <span class="hljs-string">&quot;text/javascript&quot;</span>,<br><span class="hljs-symbol">          charset:</span> <span class="hljs-string">&quot;utf-8&quot;</span>,<br>        &#125;,<br>      ],<br></code></pre></td></tr></table></figure><p>步骤三：通过 config 接口注入权限验证配置<br>所有需要使用 JS-SDK 的页面必须先注入配置信息，否则将无法调用（同一个 url 仅需调用一次，对于变化 url 的 SPA 的 web app 可在每次 url 变化时进行调用,目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题会在 Android6.2 中修复）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wechatParam(<span class="hljs-built_in">this</span>.$axios) <span class="hljs-comment">// 获取微信分享配置</span><br>        .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;&#125;)<br>        .catch(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>          wx.config(&#123;<br>            debug: <span class="hljs-literal">false</span>,<br>            appId: res.appid,<br>            timestamp: res.timestamp,<br>            nonceStr: res.nonceStr,<br>            signature: res.signature,<br>            jsApiList: [<span class="hljs-string">&quot;updateAppMessageShareData&quot;</span>, <span class="hljs-string">&quot;updateTimelineShareData&quot;</span>],<br>          &#125;);<br><br>          wx.checkJsApi(&#123;<br>            jsApiList: [<span class="hljs-string">&quot;updateAppMessageShareData&quot;</span>, <span class="hljs-string">&quot;updateTimelineShareData&quot;</span>], <span class="hljs-comment">// 需要检测的JS接口列表，所有JS接口列表见附录2,</span><br>            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;checkJsApi&quot;</span>);<br>            &#125;,<br>            fail: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;fail&quot;</span>);<br>            &#125;,<br>            complete: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;complete&quot;</span>);<br>            &#125;,<br>          &#125;);<br>          <span class="hljs-comment">//分享给朋友</span><br>          wx.ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//需在用户可能点击分享按钮前就先调用</span><br>            <span class="hljs-keyword">var</span> shareData = &#123;<br>              title: <span class="hljs-string">&quot;2020钢易通金属加工行业交流大会&quot;</span>, <span class="hljs-comment">// 分享标题</span><br>              desc: <span class="hljs-string">&quot;12月19日13:00-17:00 诚邀您参加&quot;</span>,<br>              link: <span class="hljs-built_in">window</span>.location.href, <span class="hljs-comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br>              imgUrl:<br>                <span class="hljs-string">&quot;https://gangyi-h5.oss-cn-hangzhou.aliyuncs.com/img/activity/icon.jpg&quot;</span>, <span class="hljs-comment">// 分享图标</span><br>              success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>                <span class="hljs-comment">// 设置成功</span><br>                <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;success&quot;</span>);<br>              &#125;,<br>              fail: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;fail&quot;</span>);<br>              &#125;,<br>              complete: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;complete&quot;</span>);<br>              &#125;,<br>            &#125;;<br><br>            wx.updateAppMessageShareData(shareData); <span class="hljs-comment">//分享给好友</span><br>            wx.updateTimelineShareData(shareData); <span class="hljs-comment">//分享到朋友圈</span><br>            <span class="hljs-comment">// wx.onMenuShareQQ(shareData); //分享给手机QQ</span><br>            <span class="hljs-comment">// wx.onMenuShareQZone(shareData); //分享到QQ空间</span><br>          &#125;);<br>          wx.error(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res);<br>          &#125;);<br>        &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="分享设置规范"><a href="#分享设置规范" class="headerlink" title="分享设置规范"></a>分享设置规范</h3><ul><li>分享标题：20 字以内，会分两行展示。</li><li>分享图标：建议比例 1:1，可以自动适配</li><li>分享描述：20 字以内，对标题的简要解读，会分两行展示。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以前引用的 1.4.0 的 api 后面可能会停止维护，所以建议直接使用 1.6.0 。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>qq 内部的分享配置没生效 qq 有自己的分享 api <a href="https://open.mobile.qq.com/api/component/share">qq 分享官方文档</a></li><li>可以优化配置为全局方法</li></ul><p>具体信息可以查看<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2">微信分享官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pm2进行服务端部署总结</title>
    <link href="/2020/11/29/pm2%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/"/>
    <url>/2020/11/29/pm2%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>因为是做平台相关项目，所以对 seo 有要求, 所以考虑 使用 nuxt.js 实现服务端渲染，一个有利于 seo, 还可以提高页面加载速度。<br>本地开发一切顺利，线上部署遇到了以下问题：</p></blockquote><ol><li>构建好的代码放到服务器端，直接 npm run start 终端关掉，进程也会被停掉</li><li>使用 npm run start &amp; 在后台运行， 终端关掉服务正常，但是不能维持稳定的服务，进程还是会挂</li></ol><h2 id="解决方案：pm2，查看官网详细教程"><a href="#解决方案：pm2，查看官网详细教程" class="headerlink" title="解决方案：pm2，查看官网详细教程"></a>解决方案：<a href="https://pm2.keymetrics.io/">pm2，查看官网详细教程</a></h2><blockquote><p>pm2 守护进程管理器，管理和保持应用程序在线，而且可以使用集群模式，根据可用的 CPU 数量进行缩放，这将大大提高应用程序的性能和可靠性</p></blockquote><h2 id="安装并使用-pm2"><a href="#安装并使用-pm2" class="headerlink" title="安装并使用 pm2"></a>安装并使用 pm2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install -g pm<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>使用 pm2 启动 node 服务</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">pm2 start npm -i <span class="hljs-number">0</span> --<span class="hljs-built_in">name</span> mobile --update-env --<span class="hljs-built_in">log</span>-<span class="hljs-built_in">date</span>-<span class="hljs-built_in">format</span> <span class="hljs-string">&#x27;DD-MM HH:mm:sds.SSS&#x27;</span> -- run start —watch<br></code></pre></td></tr></table></figure><p>使用 curl ip + 端口 检查启动是否成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> <span class="hljs-number">127.0.0.1:3000</span><br></code></pre></td></tr></table></figure><p>正常启动后，浏览器 ip + 端口也可以正常访问，最后阿里云做一下域名解析，服务端 nginx 设置一下反向代理就可以使用域名访问了。</p><h3 id="pm2-常用操作"><a href="#pm2-常用操作" class="headerlink" title="pm2 常用操作"></a>pm2 常用操作</h3><p>重启服务</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">pm2 researt <span class="hljs-built_in">all</span>/<span class="hljs-keyword">name</span><br></code></pre></td></tr></table></figure><p>删除服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pm2 <span class="hljs-keyword">delete</span> <span class="hljs-keyword">all</span>/<span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><p>pm2 查看实时的日志输出</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> logs<br></code></pre></td></tr></table></figure><p>pm2 错误日志保存地址</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd <span class="hljs-regexp">/root/</span>.pm2/logs<br></code></pre></td></tr></table></figure><p>终端监视内存和 CPU</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> mo<span class="hljs-symbol">nit</span><br></code></pre></td></tr></table></figure><p>查看列表</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> list<br></code></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>查看端口号是否被占用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">查看3000</span> <span class="hljs-string">端口</span><br><span class="hljs-attr">Mac:</span> <span class="hljs-string">lsof</span> <span class="hljs-string">-i:3000</span><br><span class="hljs-attr">centos:</span> <span class="hljs-string">netstat</span> <span class="hljs-string">-lnp|grep</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>停掉进程</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">kill -<span class="hljs-number">9</span> +<span class="hljs-built_in"> id</span>  // 停掉指<span class="hljs-built_in">定id</span>的进程<br>pkill -<span class="hljs-number">9</span> +<span class="hljs-built_in"> name</span>  // 停掉指<span class="hljs-built_in">定name</span>程序的所有进程<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>直接使用 node server.js 开启服务，修改文件无法热更新，需要关闭进程重新启动</li><li>开发环境可以使用 nodemon 文件修改，进程自动重启</li><li>服务端使用 pm2 直接后台运行服务，不占用终端，文件修改后需要 reload</li></ul><p>目前对于 pm2 的使用可以满足项目需要，但是实现的还是不够优雅，需要再优化一下，后续有更好的实现也会持续更新。如果有不对的，或者各位大佬有好的实现方案，也希望可以不吝赐教（手动抱拳）</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github 网站使用问题及解决方法总结</title>
    <link href="/2020/11/16/github%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5/"/>
    <url>/2020/11/16/github%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="静态资源加载失败问题"><a href="#静态资源加载失败问题" class="headerlink" title="静态资源加载失败问题"></a>静态资源加载失败问题</h2><blockquote><p>访问 github 的时候，头像图片加载失败，有时候页面布局也会有问题，打开控制台发现，github 二级域名下的静态资源加载失败。</p></blockquote><p>因为浏览器对 http 请求的并发数量是有限制的，如果请求数量超出限制，就会阻塞。其中 Chrome 浏览器最多允许对同一个域名 Host 建立 6 个 TCP 连接，不同的浏览器有所区别<br>github 这样把静态资源放到多个二级域名下，可以提高加载速度，</p><h3 id="可能出错的原因"><a href="#可能出错的原因" class="headerlink" title="可能出错的原因"></a>可能出错的原因</h3><ul><li>dns 污染，本地 dns 配置错误</li><li>github 相关域名 ip 修改</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p>问题找到啦，接下来就是解决方案，通过修改 hosts 文件中 github 相关静态资源域名的 dns 配置。步骤如下</p></blockquote><h2 id="一、-打开终端-编辑-host-文件"><a href="#一、-打开终端-编辑-host-文件" class="headerlink" title="一、 打开终端,编辑 host 文件"></a>一、 打开终端,编辑 host 文件</h2><h3 id="macOs-系统"><a href="#macOs-系统" class="headerlink" title="macOs 系统"></a>macOs 系统</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><h3 id="windows-系统"><a href="#windows-系统" class="headerlink" title="windows 系统"></a>windows 系统</h3><p>找到文件 C:\Windows\System32\drivers\etc\hosts</p><h2 id="二、配置-dns"><a href="#二、配置-dns" class="headerlink" title="二、配置 dns"></a>二、配置 dns</h2><blockquote><p>如果以前 host 中已经配置过，可以先注释掉，然后跳过第二步，刷新 dns。如果不生效再自行通过 dns 查询工具查询最快的 ip 地址 当前使用的配置。</p></blockquote><p>dns 查询工具</p><ul><li><a href="http://tool.chinaz.com/dns/">站长工具 dns 查询</a> 推荐的 ip 不太稳定</li><li><a href="https://www.ipaddress.com/">ipaddress.com</a> 推荐的更稳定</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># GitHub Start<br># <span class="hljs-number">192</span>.<span class="hljs-number">30</span>.<span class="hljs-number">253</span>.<span class="hljs-number">112</span> github.com<br><span class="hljs-number">192.30.253.119</span> gist.github.com<br><span class="hljs-number">199.232.96.133</span> assets-cdn.github.com<br><span class="hljs-number">199.232.96.133</span> raw.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> gist.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> cloud.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> camo.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars0.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars1.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars2.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars3.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars4.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars5.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars6.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars7.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars8.githubusercontent.com<br># GitHub End<br></code></pre></td></tr></table></figure><h2 id="三、刷新-mac-系统-dns-缓存"><a href="#三、刷新-mac-系统-dns-缓存" class="headerlink" title="三、刷新 mac 系统 dns 缓存"></a>三、刷新 mac 系统 dns 缓存</h2><h3 id="macOs-系统-1"><a href="#macOs-系统-1" class="headerlink" title="macOs 系统"></a>macOs 系统</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo killall -HUP mDNSResponder</span><br></code></pre></td></tr></table></figure><h3 id="windows-系统-1"><a href="#windows-系统-1" class="headerlink" title="windows 系统"></a>windows 系统</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span> /flushdns<br></code></pre></td></tr></table></figure><p>刷新缓存后，打开页面刷新即可。此问题完美解决</p><h2 id="github-网站无法加载问题"><a href="#github-网站无法加载问题" class="headerlink" title="github 网站无法加载问题"></a>github 网站无法加载问题</h2><p>访问网站提示网站无法访问，可能就是 github.com 的 dns 被污染啦，解决和上面也是一样的流程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连接 VS Code 电脑端进行编辑调试</title>
    <link href="/2020/11/11/autojs/"/>
    <url>/2020/11/11/autojs/</url>
    
    <content type="html"><![CDATA[<blockquote><p>auto.js 一个支持无障碍服务的 Android 平台上的 JavaScript IDE，同时有 VS Code 插件可提供基础的在桌面开发的功能，既可以在手机端直接编写代码，也可以使用 vs code<br>因为习惯使用电脑端开发，所以主要讲解基于 VS Code 插件的桌面开发</p></blockquote><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ol><li>手机端下载 auto.js 电脑端安装 vs code</li><li>vs code 中安装 Auto.js-VSCodeExt 插件</li></ol><h3 id="然后参照插件的说明"><a href="#然后参照插件的说明" class="headerlink" title="然后参照插件的说明"></a>然后参照插件的说明</h3><blockquote><p>Step 1</p><p>按 Ctrl+Shift+P 或点击”查看”-&gt;”命令面板”可调出命令面板，输入 Auto.js 可以看到几个命令，移动光标到命令 Auto.js: Start Server，按回车键执行该命令。此时 VS Code 会在右上角显示”Auto.js server running”，即开启服务成功。</p><p>Step 2</p><p>将手机连接到电脑启用的 Wifi 或者同一局域网中。通过命令行 ipconfig(或者其他操作系统的相同功能命令)查看电脑的 IP 地址。在 Auto.js 的侧拉菜单中启用调试服务，并输入 IP 地址，等待连接成功。</p><p>Step 3</p><p>之后就可以在电脑上编辑 JavaScript 文件并通过命令 Run 或者按键 F5 在手机上运行了。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>autojs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown使用示例</title>
    <link href="/2019/11/11/markdown%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/11/11/markdown%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用-Markdown-在线编辑器-MdEditor"><a href="#欢迎使用-Markdown-在线编辑器-MdEditor" class="headerlink" title="欢迎使用 Markdown 在线编辑器 MdEditor"></a>欢迎使用 Markdown 在线编辑器 MdEditor</h1><p><strong>Markdown 是一种轻量级的「标记语言」</strong></p><p><img src="https://www.mdeditor.com/images/logos/markdown.png" alt="markdown" title="markdown"><br><img src="../../../../img/wxShare.png" alt="本地图片" title="分享配置前后对比"></p><p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面，Markdown 文件的后缀名便是“.md”</p><h2 id="MdEditor-是一个在线编辑-Markdown-文档的编辑器"><a href="#MdEditor-是一个在线编辑-Markdown-文档的编辑器" class="headerlink" title="MdEditor 是一个在线编辑 Markdown 文档的编辑器"></a>MdEditor 是一个在线编辑 Markdown 文档的编辑器</h2><p><em>MdEditor 扩展了 Markdown 的功能（如表格、脚注、内嵌 HTML 等等），以使让 Markdown 转换成更多的格式，和更丰富的展示效果，这些功能原初的 Markdown 尚不具备。</em></p><blockquote><p>Markdown 增强版中比较有名的有 Markdown Extra、MultiMarkdown、 Maruku 等。这些衍生版本要么基于工具，如<del>Pandoc</del>，Pandao；要么基于网站，如 GitHub 和 Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p></blockquote><p>MdEditor 源于 Pandao 的 JavaScript 开源项目，开源地址<a href="https://github.com/pandao/editor.md" title="Editor.md">Editor.md</a>，并在 MIT 开源协议的许可范围内进行了优化，以适应广大用户群体的需求。向优秀的 markdown 开源编辑器原作者 Pandao 致敬。</p><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt="Pandao editor.md" title="Pandao editor.md"></p><h2 id="MdEditor-的功能列表演示"><a href="#MdEditor-的功能列表演示" class="headerlink" title="MdEditor 的功能列表演示"></a>MdEditor 的功能列表演示</h2><h1 id="标题-H1"><a href="#标题-H1" class="headerlink" title="标题 H1"></a>标题 H1</h1><h2 id="标题-H2"><a href="#标题-H2" class="headerlink" title="标题 H2"></a>标题 H2</h2><h3 id="标题-H3"><a href="#标题-H3" class="headerlink" title="标题 H3"></a>标题 H3</h3><h4 id="标题-H4"><a href="#标题-H4" class="headerlink" title="标题 H4"></a>标题 H4</h4><h5 id="标题-H5"><a href="#标题-H5" class="headerlink" title="标题 H5"></a>标题 H5</h5><h6 id="标题-H5-1"><a href="#标题-H5-1" class="headerlink" title="标题 H5"></a>标题 H5</h6><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别 HTML 标签时）</s></p><p><em>斜体字</em> <em>斜体字</em></p><p><strong>粗体</strong> <strong>粗体</strong></p><p><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同 HTML 的 abbr 标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别 HTML 标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="https://www.mdeditor.com/">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="https://www.mdeditor.com/">普通链接</a><br><a href="https://www.mdeditor.com/" title="普通链接带标题">普通链接带标题</a><br>直接链接：<a href="https://www.mdeditor.com/">https://www.mdeditor.com</a><br>[锚点链接][anchor-id]<br>[anchor-id]: <a href="https://www.mdeditor.com/">https://www.mdeditor.com/</a><br><a href="mailto:test.test@gmail.com">mailto:test.test@gmail.com</a><br>GFM a-tail link @pandao<br>邮箱地址自动链接 <a href="mailto:&#x74;&#x65;&#x73;&#116;&#46;&#116;&#101;&#x73;&#116;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#x74;&#x65;&#x73;&#116;&#46;&#116;&#101;&#x73;&#116;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a> www@vip.qq.com</p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="JS-代码"><a href="#JS-代码" class="headerlink" title="JS 代码"></a>JS 代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mate</span> <span class="hljs-attr">charest</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Editor.md, Markdown, Editor&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>      body &#123;<br>        font-size: 14px;<br><span class="css">        <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#444</span>;</span><br>        font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;<br><span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#fff</span>;</span><br>      &#125;<br>      ul &#123;<br>        list-style: none;<br>      &#125;<br>      img &#123;<br>        border: none;<br>        vertical-align: middle;<br>      &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-xxl&quot;</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-green&quot;</span>&gt;</span>Plain text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>图片加链接 (Image + Link)：</p><p><a href="https://www.mdeditor.com/images/logos/markdown.png" title="markdown"><img src="https://www.mdeditor.com/images/logos/markdown.png"></a></p><blockquote><p>Follow your heart.</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li><input checked="" disabled="" type="checkbox"> GFM task list 1</li><li><input checked="" disabled="" type="checkbox"> GFM task list 2</li><li><input disabled="" type="checkbox"> GFM task list 3<ul><li><input disabled="" type="checkbox"> GFM task list 3-1</li><li><input disabled="" type="checkbox"> GFM task list 3-2</li><li><input disabled="" type="checkbox"> GFM task list 3-3</li></ul></li><li><input disabled="" type="checkbox"> GFM task list 4<ul><li><input disabled="" type="checkbox"> GFM task list 4-1</li><li><input disabled="" type="checkbox"> GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th align="right">Value</th></tr></thead><tbody><tr><td>Computer</td><td align="right">$1600</td></tr><tr><td>Phone</td><td align="right">$12</td></tr><tr><td>Pipe</td><td align="right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp; &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo;</p><p>18&ordm;C &quot; &apos;</p><p>[========]</p><h3 id="Emoji-表情-smiley"><a href="#Emoji-表情-smiley" class="headerlink" title="Emoji 表情 :smiley:"></a>Emoji 表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li><input checked="" disabled="" type="checkbox"> :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li><input checked="" disabled="" type="checkbox"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li><input checked="" disabled="" type="checkbox"> [ ] :smiley: this is a complete item :smiley:;</li><li><input disabled="" type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li><input disabled="" type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li><input disabled="" type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li><input disabled="" type="checkbox"> :smiley: this is :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><p>[========]</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p><p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p><p>$$x &gt; y$$</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs math">\displaystyle<br>\left( \sum\_&#123;k&#x3D;1&#125;^n a\_k b\_k \right)^2<br>\leq<br>\left( \sum\_&#123;k&#x3D;1&#125;^n a\_k^2 \right)<br>\left( \sum\_&#123;k&#x3D;1&#125;^n b\_k^2 \right)<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs katex">\displaystyle<br>    \frac&#123;1&#125;&#123;<br>        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;<br>        \frac25 \pi&#125;&#125; &#x3D; 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;<br>        1+\frac&#123;e^&#123;-6\pi&#125;&#125;<br>        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;<br>         &#123;1+\cdots&#125; &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">f(x) = <span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>&#123;-<span class="hljs-keyword">\infty</span>&#125;<span class="hljs-built_in">^</span><span class="hljs-keyword">\infty</span><br>    <span class="hljs-keyword">\hat</span> f(<span class="hljs-keyword">\xi</span>)<span class="hljs-keyword">\,</span>e<span class="hljs-built_in">^</span>&#123;2 <span class="hljs-keyword">\pi</span> i <span class="hljs-keyword">\xi</span> x&#125;<br>    <span class="hljs-keyword">\,</span>d<span class="hljs-keyword">\xi</span><br></code></pre></td></tr></table></figure><h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote><p>Print Test: Ctrl + P</p></blockquote><p>[========]</p><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs flow">st&#x3D;&gt;start: 用户登陆<br>op&#x3D;&gt;operation: 登陆操作<br>cond&#x3D;&gt;condition: 登陆成功 Yes or No?<br>e&#x3D;&gt;end: 进入后台<br><br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></td></tr></table></figure><p>[========]</p><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs seq">Andrew-&gt;China: Says Hello<br>Note right of China: China thinks\nabout it<br>China--&gt;Andrew: How are you?<br>Andrew-&gt;&gt;China: I am good thanks!<br></code></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js面试题</title>
    <link href="/2019/02/27/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2019/02/27/js%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><p>堆：存储引用类型值的空间</p><p>栈：存储基本类型值和指定代码的环境</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js 面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css样式相关面试题</title>
    <link href="/2019/02/26/css%E6%A0%B7%E5%BC%8F%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2019/02/26/css%E6%A0%B7%E5%BC%8F%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总结梳理前端开发在面试中遇到的高频 css 面试题</p></blockquote><h2 id="子-div-在父-div-中水平垂直居中的方式"><a href="#子-div-在父-div-中水平垂直居中的方式" class="headerlink" title="子 div 在父 div 中水平垂直居中的方式"></a>子 div 在父 div 中水平垂直居中的方式</h2><ol><li>display: flex 弹性和布局，需要考虑 ie 兼容问题</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outside</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background</span>: goldenrod;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.inside</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background</span>: forestgreen;<br>&#125;<br></code></pre></td></tr></table></figure><p>宽高和背景色属性下面实现中省略</p><ol start="2"><li>position 定位 + maring(子元素高度确定) / transform（子元素高度不确定）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outside</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background</span>: goldenrod;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.inside</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin</span>: -<span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> -<span class="hljs-number">50px</span>;<br>    <span class="hljs-comment">/* transform:translate(-50%,-50%); */</span><br>    <span class="hljs-attribute">background</span>: forestgreen;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>display：table-cell，vertical-align：middle;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outside</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background</span>: goldenrod;<br>    <span class="hljs-attribute">display</span>:table-cell;<br>    <span class="hljs-attribute">vertical-align</span>:middle;<br>&#125;<br><span class="hljs-selector-class">.inside</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">background</span>: forestgreen;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="用纯-CSS-创建一个三角形？"><a href="#用纯-CSS-创建一个三角形？" class="headerlink" title="用纯 CSS 创建一个三角形？"></a>用纯 CSS 创建一个三角形？</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  采用的是相邻边框链接处的均分原理</span><br><span class="hljs-comment">  将元素的宽高设为0，只设置 border ,</span><br><span class="hljs-comment">  将任意三条边隐藏掉（颜色设为 transparent ）,剩下的就是一个三角形</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-id">#demo</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-color</span>: transparent transparent red transparent;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><blockquote><p>当不给父元素设置宽高时，父元素的宽高会被子元素的内容撑开。但当子元素设置浮动属性（float） 后，子元素会溢出到父元素外，父元素的宽高也不会被撑开，这称之为“高度塌陷”。可以理解为使用浮动后的副作用，解决方法大体有以下两种</p></blockquote><ol><li> 子元素添加 clear 属性</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span> &#123;<br>  <span class="hljs-attribute">zoom</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>父元素添加 overflow: hiden;触发浮动元素父元素的 BFC (Block Formatting Contexts, 块级格式化上下文)，使到该父元素可以包含浮动元素</li></ol><p>第二种虽然代码量小，但是超出尺寸的内容会被隐藏（不推荐）目前主流的做法是使用第一种</p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><ul><li><p>标准盒模型 (box-sizing: content-box;) 宽高大小不包含 padding,border</p></li><li><p>IE 盒模型 （box-sizing: border-box;）宽高大小包含 padding,border<br>目前采用最多的是 ie 盒模型，设置宽高包含这个元素尺寸，不需要在计算</p></li><li><p>flex 布局</p></li><li><p>多列布局 (column-count: 3;容器分三列布局，一般用于 平板电脑等 宽屏上的文章布局)</p></li><li><p>网格布局 （grid）</p></li></ul><h2 id="经典布局方案"><a href="#经典布局方案" class="headerlink" title="经典布局方案"></a>经典布局方案</h2><p>左右固定，中间自适应</p><ul><li>圣杯布局</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs dts">.clearfix&#123;<br><span class="hljs-symbol">        zoom:</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    .clearfix::after&#123;<br><span class="hljs-symbol">        clear:</span> both;<br><span class="hljs-symbol">        content:</span> <span class="hljs-string">&#x27;.&#x27;</span>;<br><span class="hljs-symbol">        visibility:</span> hidden;<br><span class="hljs-symbol">        display:</span> block;<br><span class="hljs-symbol">        overflow:</span> hidden;<br><span class="hljs-symbol">        height:</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    .content&#123;<br><span class="hljs-symbol">        overflow:</span> hidden;<br><span class="hljs-symbol">        height:</span> <span class="hljs-number">100</span>%;<br><span class="hljs-symbol">        padding:</span> <span class="hljs-number">0</span> <span class="hljs-number">100</span>px;<br>    &#125;<br>    .center,.left, .right&#123;<br><span class="hljs-symbol">        float:</span> left;<br>    &#125;<br>    .center&#123;<br><span class="hljs-symbol">        width:</span> <span class="hljs-number">100</span>%;<br>        min-height: <span class="hljs-number">400</span>px;<br><span class="hljs-symbol">        background:</span> goldenrod;<br>    &#125;<br>    .left, .right&#123;<br><span class="hljs-symbol">        width:</span> <span class="hljs-number">100</span>px;<br><span class="hljs-symbol">        height:</span> <span class="hljs-number">100</span>px;<br><span class="hljs-symbol">        background:</span> forestgreen;<br>    &#125;<br>    .left&#123;<br>        margin-left: <span class="hljs-number">-100</span>%;<br><span class="hljs-symbol">        position:</span> relative;<br><span class="hljs-symbol">        left:</span> <span class="hljs-number">-100</span>px;<br>    &#125;<br>    .right&#123;<br>        margin-right: <span class="hljs-number">-100</span>px;<br>    &#125;<br>        <span class="hljs-params">&lt;div class=&quot;content &quot;&gt;</span><br>       <span class="hljs-params">&lt;div class=&quot;center&quot;&gt;</span><span class="hljs-params">&lt;/div&gt;</span><br>       <span class="hljs-params">&lt;div class=&quot;left&quot;&gt;</span><span class="hljs-params">&lt;/div&gt;</span><br>       <span class="hljs-params">&lt;div class=&quot;right&quot;&gt;</span><span class="hljs-params">&lt;/div&gt;</span><br>   <span class="hljs-params">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>双飞翼布局<br>和圣杯布局不同的就是 left，right 和 center 不在同一个父级元素下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;div class=&quot;clearfix&quot;&gt;</span><br>      <span class="hljs-params">&lt;div class=&quot;content &quot;&gt;</span><br>          <span class="hljs-params">&lt;div class=&quot;center&quot;&gt;</span><span class="hljs-params">&lt;/div&gt;</span><br>      <span class="hljs-params">&lt;/div&gt;</span><br>      <span class="hljs-params">&lt;div class=&quot;left&quot;&gt;</span><span class="hljs-params">&lt;/div&gt;</span><br>      <span class="hljs-params">&lt;div class=&quot;right&quot;&gt;</span><span class="hljs-params">&lt;/div&gt;</span><br>  <span class="hljs-params">&lt;/div&gt;</span><br>   .clearfix&#123;<br><span class="hljs-symbol">          zoom:</span> <span class="hljs-number">1</span>;<br>      &#125;<br>      .clearfix::after&#123;<br><span class="hljs-symbol">          clear:</span> both;<br><span class="hljs-symbol">          content:</span> <span class="hljs-string">&#x27;.&#x27;</span>;<br><span class="hljs-symbol">          visibility:</span> hidden;<br><span class="hljs-symbol">          display:</span> block;<br><span class="hljs-symbol">          overflow:</span> hidden;<br><span class="hljs-symbol">          height:</span> <span class="hljs-number">0</span>;<br>      &#125;<br>      .content&#123;<br><span class="hljs-symbol">          width:</span> <span class="hljs-number">100</span>%;<br><span class="hljs-symbol">          height:</span> <span class="hljs-number">100</span>%;<br>      &#125;<br>      .content,.left, .right&#123;<br><span class="hljs-symbol">          float:</span> left;<br>      &#125;<br>      .center&#123;<br><span class="hljs-symbol">          margin:</span> <span class="hljs-number">0</span> <span class="hljs-number">100</span>px <span class="hljs-number">0</span> <span class="hljs-number">100</span>px;<br>          min-height: <span class="hljs-number">400</span>px;<br><span class="hljs-symbol">          background:</span> goldenrod;<br>      &#125;<br>      .left, .right&#123;<br><span class="hljs-symbol">          width:</span> <span class="hljs-number">100</span>px;<br><span class="hljs-symbol">          height:</span> <span class="hljs-number">100</span>px;<br><span class="hljs-symbol">          background:</span> forestgreen;<br>      &#125;<br>      .left&#123;<br>          margin-left: <span class="hljs-number">-100</span>%;<br>      &#125;<br>      .right&#123;<br>          margin-left: <span class="hljs-number">-100</span>px;<br>      &#125;<br></code></pre></td></tr></table></figure><ul><li>使用 flex 布局</li></ul></li></ul><h2 id="flex-弹性布局"><a href="#flex-弹性布局" class="headerlink" title="flex 弹性布局"></a>flex 弹性布局</h2><ol><li>设置盒子的 display 属性为 flex，或者 line-flex，其对应还有六个 css 属性，分别为：</li></ol><p>1）flex-direction：设置子元素的排列方式（row，column，row-reverse，column-reverse）</p><p>2）flex-warp：设置子元素的是否换行（nowarp，warp，warp-reverse）</p><p>3）flex-flow：flex-direction 和 flex-warp 的缩写，默认为 row nowarp</p><p>4）justify-content：设置子元素的水平排列方式（flex-start，flex-end，center，span-around，span-between）</p><p>5）align-items：设置子元素的垂直方式（flex-start，flex-end，center，stretch，baseline）</p><p>6）align-content：设置多个轴线的排列方式（flex-start，flex-end，center，spand-around，spand-between，stretch）</p><ol start="2"><li>对应的子元素项目也拥有自身的六个 css 属性，分别为：</li></ol><p>1）order：设置元素的排列权重 值越大越在后</p><p>2）flex-grow：设置元素的放大比例</p><p>3）flex-shrink：设置元素的缩小比例</p><p>4）flex-basis：设置多余空间项目主轴所占比例空间</p><p>5）flex：flex-grow 和 flex-shrink 和 flex-basis 的缩写方式 默认为 0 1 auto</p><p>6）align-self：设置子元素自己的垂直排列方式，默认为盒子的 align-items 的值</p><p>:warning:：设置 flex 布局后，子元素的 float，clear，vertical-align 都无效</p><h2 id="CSS3-新增属性用法的整理："><a href="#CSS3-新增属性用法的整理：" class="headerlink" title="CSS3 新增属性用法的整理："></a>CSS3 新增属性用法的整理：</h2><p>1、box-shadow（阴影效果）</p><p>2、border-color（为边框设置多种颜色）</p><p>3、border-image（图片边框）</p><p>4、text-shadow（文本阴影）</p><p>5、text-overflow（文本截断）</p><p>6、word-wrap（自动换行）</p><p>7、border-radius（圆角边框）</p><p>8、opacity（透明度）</p><p>9、box-sizing（控制盒模型的组成模式）</p><p>10、resize（元素缩放）</p><p>11、outline（外边框）</p><p>12、background-size（指定背景图片尺寸）</p><p>13、background-origin（指定背景图片从哪里开始显示）</p><p>14、background-clip（指定背景图片从什么位置开始裁剪）</p><p>15、background（为一个元素指定多个背景）</p><p>16、hsl（通过色调、饱和度、亮度来指定颜色颜色值）</p><p>17、hsla（在 hsl 的基础上增加透明度设置）</p><p>18、rgba（基于 rgb 设置颜色，a 设置透明度）</p><h2 id="移动端响应式布局开发的方案"><a href="#移动端响应式布局开发的方案" class="headerlink" title="移动端响应式布局开发的方案"></a>移动端响应式布局开发的方案</h2><ul><li>media</li><li>rem</li><li>vh / vw 类似百分比布局</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css中margin属性的使用</title>
    <link href="/2018/10/31/css%E4%B8%ADmargin%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/10/31/css%E4%B8%ADmargin%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>margin 是我们在页面布局的时候经常使用的 css 属性</p></blockquote><p>当 margin 属性值为百分比时，边距是基于父元素的宽度来计算的</p><p>经查阅，这与页面默认的书写模式 writing-mode 有关。默认情况下 writing-mode 的值为 horizontal-tb，即水平书写方式。</p><p>当把书写模式修改为纵向的时候，margin-top/bottom/left/right 的百分比值都将会以包含元素的高度为参照</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用canvas实现图片压缩上传</title>
    <link href="/2018/10/16/%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E4%B8%8A%E4%BC%A0/"/>
    <url>/2018/10/16/%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目需求： 上传图片前对图片进行压缩减少文件体积<br>需要支持上传图片的格式 png，jpg，gif 因为 canvas 不支持 gif，所以对 gif 不做处理<br>又因为 canvas 的 bolb 方法只支持对 jpeg，和 webp 格式的文件做质量压缩，项目又需要兼容 ie，故只能保存为 jpeg 格式文件</p></blockquote><h2 id="一、上传前压缩图片的好处"><a href="#一、上传前压缩图片的好处" class="headerlink" title="一、上传前压缩图片的好处"></a>一、上传前压缩图片的好处</h2><ul><li>可以减少用户的等待时间，提升使用体验，目前手机拍摄的图片文件大小一般在几 M 左右，文件直接上传时会有卡顿现象。</li><li>可以减少服务端的存储空间</li><li>再次回去图片资源是也可以快速的加载。虽然目前阿里云的 oss 有相对应的 api 可以通过降低图片质量等方法减少体积，不过使用 canvas 可以直接减少源文件的体积。</li></ul><h2 id="二、实现思路以及示例代码"><a href="#二、实现思路以及示例代码" class="headerlink" title="二、实现思路以及示例代码"></a>二、实现思路以及示例代码</h2><ol><li>使用 FileReader 对象获取本地文件（使用文件选择 input 元素）的 base64 内容</li><li>使用 context.drawImage 把获取到的文件画在 canvas 上</li><li>使用 canvas.toBlob 对图片做质量压缩</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对选中的图片文件处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;obj&#125;</span>  </span>event  图片文件</span><br><span class="hljs-comment"> * */</span><br>uploadImg (event) &#123;<br>    <span class="hljs-comment">// 为选择文件返回</span><br>    <span class="hljs-keyword">if</span> (!event.target.files[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">let</span> file = event.target.files[<span class="hljs-number">0</span>],<br>        fileName = file.name.substring(file.name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>).toLowerCase();<br>    <span class="hljs-comment">// 文件格式校验</span><br>    <span class="hljs-keyword">if</span> (fileName != <span class="hljs-string">&quot;jpg&quot;</span> &amp;&amp; fileName != <span class="hljs-string">&quot;png&quot;</span> &amp;&amp; fileName != <span class="hljs-string">&quot;gif&quot;</span> ) &#123;<br>        <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;setPrompt&#x27;</span>, &#123;<span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;请选择正确的图片格式上传(jpg，png，gif)&#x27;</span>&#125;)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// gif图片格式不做处理，其他静态图片做质量压缩处理以减小图片大小</span><br>    <span class="hljs-keyword">if</span> (fileName == <span class="hljs-string">&#x27;gif&#x27;</span>) &#123;<br>        <span class="hljs-built_in">this</span>.uploadApi(file, file.name)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> _this = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-comment">// 压缩图片需要的一些元素和对象</span><br>        <span class="hljs-keyword">let</span> reader = <span class="hljs-keyword">new</span> FileReader(), img = <span class="hljs-keyword">new</span> Image();<br>        reader.readAsDataURL(file);<br>        <span class="hljs-comment">// 缩放图片需要的canvas</span><br>        <span class="hljs-keyword">let</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>        <span class="hljs-keyword">let</span> context = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>        <span class="hljs-comment">// base64地址图片加载完毕后</span><br>        img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 图片原始尺寸</span><br>            <span class="hljs-keyword">let</span> originWidth = <span class="hljs-built_in">this</span>.width;<br>            <span class="hljs-keyword">let</span> originHeight = <span class="hljs-built_in">this</span>.height;<br>            canvas.width = originWidth;<br>            canvas.height = originHeight;<br>            <span class="hljs-comment">// 清除画布</span><br>            context.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, originWidth, originHeight);<br>            <span class="hljs-comment">// 图片压缩</span><br>            context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, originWidth, originHeight);<br>            <span class="hljs-comment">// canvas转为blob并上传</span><br>            canvas.toBlob(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">blob</span>) </span>&#123;<br>                _this.uploadApi(blob, file.name)<br>            &#125;, file.type == <span class="hljs-string">&#x27;image/gif&#x27;</span> ? <span class="hljs-string">&#x27;image/gif&#x27;</span> : <span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-number">0.6</span>);<br>        &#125;<br>        <span class="hljs-comment">// 文件base64化，以便获知图片原始尺寸</span><br>        reader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            img.src = e.target.result;<br>        &#125;;<br>    &#125;<br>&#125;,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传选中的图片文件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;obj&#125;</span>    </span>file  图片文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;string&#125;</span> </span>fileName  文件名称</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-function"><span class="hljs-title">uploadApi</span>(<span class="hljs-params">file, fileName</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> FormData()<br>    formData.append(<span class="hljs-string">&#x27;img&#x27;</span>, file, fileName)<br>    axios.post(<span class="hljs-string">&#x27;/upload/upload-img&#x27;</span>, formData, &#123;<span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>&#125;&#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (res.data.code == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-built_in">this</span>.img_list.splice(<span class="hljs-built_in">this</span>.img_list.length, <span class="hljs-number">1</span>, res.data.url)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;setPrompt&#x27;</span>, &#123;<span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">text</span>: res.data.message&#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>感谢阅读，如有错误，欢迎指正交流。</p><p>参考文档:<br><a href="https://www.zhangxinxu.top/wordpress/2017/07/html5-canvas-image-compress-upload/">HTML5 file API 加 canvas 实现图片前端 JS 压缩并上传</a></p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 常用操作</title>
    <link href="/2017/10/15/vim/"/>
    <url>/2017/10/15/vim/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总结使用 vim 编辑文件的常用操作，后面会持续更新</p></blockquote><h2 id="创建编辑文件"><a href="#创建编辑文件" class="headerlink" title="创建编辑文件"></a>创建编辑文件</h2><ol><li>使用 vim （vi） + 文件名进入文件（如果文件名不存在则默认为新建）</li><li>进入文件后，在英文状态下输入 i(insert)，进入编辑模式。</li><li>需要保存退出的时候先点 esc(英文状态下)退出插入模式。再输入 shift+：进入命令模式。</li></ol><h3 id="对于文件是否有改动分情况对应操作"><a href="#对于文件是否有改动分情况对应操作" class="headerlink" title="对于文件是否有改动分情况对应操作"></a>对于文件是否有改动分情况对应操作</h3><ul><li>文件无改动输入 q 回车</li><li>文件有改动 wq+回车，或者 x+回车，就快捷键按过 esc 之后直接按 shift+ZZ；</li><li>有改动但是不保存，先按 ESC，再输入冒号，在输入命令时，直接输入”q!” 强制退出！</li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>复制的命令是 y，即 yank（提起） ，常用的命令如下：<br>y 在使用 v 模式选定了某一块的时候，复制选定块到缓冲区用；<br>全部复制：按 esc 后，然后 ggyG<br>yy: 复制单行</p><h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><p>剪切的命令是 d，即 delete，d 与 y 命令基本类似，所以两个命令用法一样，包括含有数字的用法.<br> d 剪切选定块到缓冲区；</p><h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><p>粘贴的命令式 p，即 put（放下）<br>p 小写 p 代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>dd:删除游标所在的一整行(常用)<br>ndd:n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除光标所在的向下 20 行<br>d1G:删除光标所在到第一行的所有数据<br>dG:删除光标所在到最后一行的所有数据<br>d$:删除光标所在处，到该行的最后一个字符<br>d0:那个是数字 0,删除光标所在到该行的最前面的一个字符<br>x,X:x 向后删除一个字符(相当于[del]按键),X 向前删除一个字符(相当于[backspace]即退格键)<br>nx:n 为数字，连续向后删除 n 个字符<br>全部删除：按 esc 后，然后 dG</p><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>在复制粘贴时，另一组常用的命令是 u（撤销操作），U（撤销某一行最近所有修改），Ctrl+R（重做），这些功能主要是 vim 中的，vi 中略有差别</p><h2 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h2><p>如想把所有的 buyer 换成 seller</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">%s<span class="hljs-regexp">/buyer/</span>seller/g<br></code></pre></td></tr></table></figure><h2 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h2><p>全选（高亮显示）：按 esc 后，然后 ggvG 或者 ggVG</p><p>gg：是让光标移到首行，在 vim 才有效，vi 中无效<br>v ： 是进入 Visual(可视）模式<br>G ：光标移到最后一行</p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
