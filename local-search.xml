<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>github 网站使用问题及解决方法总结</title>
    <link href="/2021/01/20/github%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5/"/>
    <url>/2021/01/20/github%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="静态资源加载失败问题"><a href="#静态资源加载失败问题" class="headerlink" title="静态资源加载失败问题"></a>静态资源加载失败问题</h2><blockquote><p>访问 github 的时候，头像图片加载失败，有时候页面布局也会有问题，打开控制台发现，github 二级域名下的静态资源加载失败。</p></blockquote><p>因为浏览器对 http 请求的并发数量是有限制的，如果请求数量超出限制，就会阻塞。其中 Chrome 浏览器最多允许对同一个域名 Host 建立 6 个 TCP 连接，不同的浏览器有所区别<br>github 这样把静态资源放到多个二级域名下，可以提高加载速度，</p><h3 id="可能出错的原因"><a href="#可能出错的原因" class="headerlink" title="可能出错的原因"></a>可能出错的原因</h3><ul><li>dns 污染，本地 dns 配置错误</li><li>github 相关域名 ip 修改</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p>问题找到啦，接下来就是解决方案，通过修改 hosts 文件中 github 相关静态资源域名的 dns 配置。步骤如下</p></blockquote><h2 id="一、-打开终端-编辑-host-文件"><a href="#一、-打开终端-编辑-host-文件" class="headerlink" title="一、 打开终端,编辑 host 文件"></a>一、 打开终端,编辑 host 文件</h2><h3 id="macOs-系统"><a href="#macOs-系统" class="headerlink" title="macOs 系统"></a>macOs 系统</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><h3 id="windows-系统"><a href="#windows-系统" class="headerlink" title="windows 系统"></a>windows 系统</h3><p>找到文件 C:\Windows\System32\drivers\etc\hosts</p><h2 id="二、配置-dns"><a href="#二、配置-dns" class="headerlink" title="二、配置 dns"></a>二、配置 dns</h2><blockquote><p>如果以前 host 中已经配置过，可以先注释掉，然后跳过第二步，刷新 dns。如果不生效再自行通过 dns 查询工具查询最快的 ip 地址 当前使用的配置。</p></blockquote><p>dns 查询工具</p><ul><li><a href="http://tool.chinaz.com/dns/">站长工具 dns 查询</a> 推荐的 ip 不太稳定</li><li><a href="https://www.ipaddress.com/">ipaddress.com</a> 推荐的更稳定</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># GitHub Start<br># <span class="hljs-number">192</span>.<span class="hljs-number">30</span>.<span class="hljs-number">253</span>.<span class="hljs-number">112</span> github.com<br><span class="hljs-number">192.30.253.119</span> gist.github.com<br><span class="hljs-number">199.232.96.133</span> assets-cdn.github.com<br><span class="hljs-number">199.232.96.133</span> raw.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> gist.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> cloud.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> camo.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars0.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars1.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars2.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars3.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars4.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars5.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars6.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars7.githubusercontent.com<br><span class="hljs-number">199.232.96.133</span> avatars8.githubusercontent.com<br># GitHub End<br></code></pre></td></tr></table></figure><h2 id="三、刷新-mac-系统-dns-缓存"><a href="#三、刷新-mac-系统-dns-缓存" class="headerlink" title="三、刷新 mac 系统 dns 缓存"></a>三、刷新 mac 系统 dns 缓存</h2><h3 id="macOs-系统-1"><a href="#macOs-系统-1" class="headerlink" title="macOs 系统"></a>macOs 系统</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo killall -HUP mDNSResponder</span><br></code></pre></td></tr></table></figure><h3 id="windows-系统-1"><a href="#windows-系统-1" class="headerlink" title="windows 系统"></a>windows 系统</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span> /flushdns<br></code></pre></td></tr></table></figure><p>刷新缓存后，打开页面刷新即可。此问题完美解决</p><h2 id="github-网站无法加载问题"><a href="#github-网站无法加载问题" class="headerlink" title="github 网站无法加载问题"></a>github 网站无法加载问题</h2><p>访问网站提示网站无法访问，可能就是 github.com 的 dns 被污染啦，解决和上面也是一样的流程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在互联网小厂做面试官的一些感悟</title>
    <link href="/2021/01/12/%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%B0%8F%E5%8E%82%E5%81%9A%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/"/>
    <url>/2021/01/12/%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%B0%8F%E5%8E%82%E5%81%9A%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>公司是一个初创公司，规模也不大，但是正常的人员流动，免不了需要筛选面试一些新的候选人，最近将近年底，涉及到年终奖的问题所以招聘很难，加上公司位置确实有点偏，不太有优势，所以造成了 boss 上很多已读未回的情况，一度怀疑招不到人，但是又总感觉下一个聊的人可能会成为未来的同事。整个过程还是有不少感触的，所以记录一下</p></blockquote><h2 id="招聘需求的理解"><a href="#招聘需求的理解" class="headerlink" title="招聘需求的理解"></a>招聘需求的理解</h2><blockquote><p>毕竟合适的才是最好的，理清楚自己的需求也很重要，这样选择才可以更准确、更高效</p></blockquote><p>我理解的招聘，不需要像大厂那样面试造火箭，入职拧螺丝。我们就是业务线需要（空缺一个前端开发岗），能独立完成一个项目（当然感觉这也是一句空话）具体我大概梳理了以下几点：</p><ul><li>基础扎实</li><li>公司目前用到的技术栈，可以熟练掌握</li><li>对于平常使用的技术栈，是不是有一些深入的思考</li><li>项目经验，涉及的业务场景足够丰富（pc、h5、小程序）</li><li>过往的项目，对于项目整体的了解，有没有技术驱动业务的实践</li></ul><h2 id="面试题的选择"><a href="#面试题的选择" class="headerlink" title="面试题的选择"></a>面试题的选择</h2><blockquote><p>网上有很多大厂面试题，当然也可以按需参考</p></blockquote><p>基础知识掌握，项目经验，解决问题的能力，<br>那真正的面试过程，少问一点概念性的问题，因为感觉有标准答案在，展现不了区别，比如说闭包是什么，这种。<br>更多的换成类似，从输入 url 到页面加载的整个过程，过程中可以优化的一些点，这种发散性的问题。</p><ul><li><p>还有像项目中遇到的一些难点，如何解决的</p></li><li><p>最有成就感的一个项目</p></li><li><p>包括也会问最近在学习的东西聊一聊，或者平常学习/解决问题的一些方法途径。</p></li><li><p>当然自己最近遇到的一些问题有时候也会问，看看会不会有其他更好的思路。</p></li></ul><p>就是更多的是通过一个聊天的方式去交流，在放松的状态下让对方发挥的更好，毕竟顺利啦大家以后都是同事。</p><p>当然，真正的公司工作，技术只是一部分，软实力也很重要，沟通表达能力，自信积极的状态，或者其他优势适当的展现出来都算加分项</p><h3 id="最后说一下比较忌讳的点"><a href="#最后说一下比较忌讳的点" class="headerlink" title="最后说一下比较忌讳的点"></a>最后说一下比较忌讳的点</h3><blockquote><p>本身应该是共识，但是还是有不人做的不好，所以顺便提一下。</p></blockquote><ul><li>约好的面试时间，尽量不要迟到，当然也不需要提前很早到，真有突发情况尽量提前告知，方便彼此安排时间，我认为守时是对面试最起码的尊重。</li><li>面试爽约。 没有任何说明的爽约。我还遇到一个求职者约的 3 点的面试，2 点 58 分的时候告诉我说，‘提前和你说一下，今天来不了了’（手动狗头）</li><li>公司产品完全不熟悉。简历海投是一种方式，但是到了面试环节，对公司的产品稍微了解一下还是很有必要的，通过公司的产品还是可以看出很多东西的，代码就在哪里看看也不多，说不定还能找到一些 bug，或者可以优化的点，是不是这些在面试的时候可以主动聊聊，感觉都是加分项。</li></ul><p>当然这些都是我自己的一些想法，欢迎大家有更好的想法可以一起交流。最也后祝大家可以实现薪资 double</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试 生活感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuejs过滤器</title>
    <link href="/2021/01/12/vuejs%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2021/01/12/vuejs%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>vuejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js跳转页面控制打开新标签页的处理</title>
    <link href="/2021/01/12/js%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E6%8E%A7%E5%88%B6%E6%89%93%E5%BC%80%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2021/01/12/js%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E6%8E%A7%E5%88%B6%E6%89%93%E5%BC%80%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目中经常碰到列表跳详情的操作，需求想要新标签页不在当前页面，而是打开一个新的标签页</p></blockquote><p>这需求简单，直接 windows.open(url,’_blank’)搞定，测试发现</p><h3 id="问题一：如果在-ajax-异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。"><a href="#问题一：如果在-ajax-异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。" class="headerlink" title="问题一：如果在 ajax 异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。"></a>问题一：如果在 ajax 异步请求数据的时候，会阻止弹框跳转。主要是浏览器会认为这个跳转不是用户自己操作的。</h3><p>解决方法如下：使用 a 标签模拟用户点击操作</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @method    跳转新的标签页</span><br><span class="hljs-comment">* @param     &#123;参数类型&#125; 参数名 参数说明</span><br><span class="hljs-comment">* @return    &#123;返回值类型&#125; 返回值说明</span><br><span class="hljs-comment">*/</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>prototype.$open_blank = <span class="hljs-keyword">function</span>(url) &#123;<br>  <span class="hljs-comment">//  window.open(url,&quot;_blank&quot;);</span><br>   <span class="hljs-keyword">let</span> referLink = document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">a</span>&#x27;)</span>;<br>  referLink.href = url;<br>  referLink.target = <span class="hljs-string">&quot;_blank&quot;</span>;<br>  referLink.rel=<span class="hljs-string">&quot;noopener noreferrer&quot;</span>;<br>  document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">referLink</span>)</span>;<br>  referLink.click<span class="hljs-literal">()</span>;<br>  document.body.remove<span class="hljs-constructor">Child(<span class="hljs-params">referLink</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题二：性能问题-Chrome-中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。"><a href="#问题二：性能问题-Chrome-中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。" class="headerlink" title="问题二：性能问题 Chrome 中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。"></a>问题二：性能问题 Chrome 中跳转新的标签页以后，上一个标签页面会卡死无法操作，其他浏览器正常。</h3><p>暂未发现解决方案。</p><h3 id="问题三：-安全问题-新开的窗口中可以通过-window-opener-location-newURL-来重写父页面的-url。所以有安全风险"><a href="#问题三：-安全问题-新开的窗口中可以通过-window-opener-location-newURL-来重写父页面的-url。所以有安全风险" class="headerlink" title="问题三： 安全问题 新开的窗口中可以通过 window.opener.location = newURL 来重写父页面的 url。所以有安全风险"></a>问题三： 安全问题 新开的窗口中可以通过 window.opener.location = newURL 来重写父页面的 url。所以有安全风险</h3><p>解决方法 ：a 标签的 rel 添加 noopener</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">referLink.rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span><span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://cloud.tencent.com/developer/article/1008860">在新窗口中打开页面？小心有坑！</a></p><p><a href="https://blog.asaki.me/2018/05/07/">打开新窗口的正确姿势</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js高级程序设计第四版</title>
    <link href="/2021/01/07/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    <url>/2021/01/07/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="4-2-2-变量声明"><a href="#4-2-2-变量声明" class="headerlink" title="4.2.2 变量声明"></a>4.2.2 变量声明</h4><ol><li>var 是函数作用域声明， let、const 是块级作用域声明</li><li>let 同一作用域内不能声明两次，var 重复的会被忽略覆盖</li><li>let 适合在循环中声明迭代变量，使用 var 声明的迭代变量会泄漏到循环外部</li><li>const 被赋值为对象，应用值不能修改，但对象的键则不受限制，如果想整个对象都不能修改，可以使用 Object.freeze()</li></ol><h4 id="4-3-垃圾回收"><a href="#4-3-垃圾回收" class="headerlink" title="4.3 垃圾回收"></a>4.3 垃圾回收</h4><blockquote><p>js 最常用的垃圾回收策略是标记清理</p></blockquote><p>内存泄漏</p><blockquote><p>js 中的内存泄漏大部分是由不合理的引用导致的. 解除变量引用不仅可以消除循环引用，而且对垃圾回收也有帮助</p></blockquote><ol><li>意外声明全局变量</li><li>定时器的回调通过闭包引用外部变量</li><li>闭包</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vsCode使用技巧</title>
    <link href="/2020/12/22/vsCode%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/12/22/vsCode%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>终端使用 code . 的方式在 VSCode 中打开当前项目</p></blockquote><h2 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h2><p>直接在终端项目目录中输入</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">code</span> .<br></code></pre></td></tr></table></figure><h2 id="Mac-用户"><a href="#Mac-用户" class="headerlink" title="Mac 用户"></a>Mac 用户</h2><p>打开 VSCode 使用 shift + command +P 打开命令面板，然后输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">Install</span> ‘code&#x27; <span class="hljs-keyword">command</span> in PATH<br></code></pre></td></tr></table></figure><p>点击安装即可.</p><p>再打开终端输入 code . 即可在 VSCode 中打开当前文件夹</p>]]></content>
    
    
    
    <tags>
      
      <tag>vsCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js防止按钮重复点击</title>
    <link href="/2020/12/15/js%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/"/>
    <url>/2020/12/15/js%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>业务需求场景，项目中涉及到保存，修改数据的时候，多次点击按钮，因为数据处理需要时间，会造成重复操作的情况。</p></blockquote><h3 id="解决方案一：-表单按钮修改-disabled-属性，-或者在-js-事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开"><a href="#解决方案一：-表单按钮修改-disabled-属性，-或者在-js-事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开" class="headerlink" title="解决方案一： 表单按钮修改 disabled 属性， 或者在 js 事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开"></a>解决方案一： 表单按钮修改 disabled 属性， 或者在 js 事件中设置标签判断。简单粗暴，不够优雅，每个事件里都要加重复的逻辑，没有分离开</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">this.disabled</span> = <span class="hljs-literal">true</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="方案二：使用函数防抖（自定义，或者直接使用-lodash-的-debounce-方法）"><a href="#方案二：使用函数防抖（自定义，或者直接使用-lodash-的-debounce-方法）" class="headerlink" title="方案二：使用函数防抖（自定义，或者直接使用 lodash 的 debounce 方法）"></a>方案二：使用函数防抖（自定义，或者直接使用 lodash 的 debounce 方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> timeout = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (timeout !== <span class="hljs-literal">null</span>) <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    timeout = <span class="hljs-built_in">setTimeout</span>(fn, wait);<br>  &#125;;<br>&#125;<br> <span class="hljs-comment">// 绑定的按钮点击事件调用防抖方法</span><br> debounce(submit, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h3 id="方案三：可以添加-loading-动画"><a href="#方案三：可以添加-loading-动画" class="headerlink" title="方案三：可以添加 loading 动画"></a>方案三：可以添加 loading 动画</h3><p>如果涉及 http 请求，可以等 http 响应开始添加 loading 动画，完成后关闭。</p>]]></content>
    
    
    
    <tags>
      
      <tag>js优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h5微信分享配置</title>
    <link href="/2020/12/06/h5%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/12/06/h5%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>h5 页面实现微信分享配置，可以展示配置的 title, 描述，和截图</p></blockquote><!-- ![分享配置前后对比](./img/wxShare.png "分享配置前后对比") --><p>步骤一：绑定域名<br>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS 接口安全域名”。</p><p>备注：</p><ul><li>登录后可在“开发者中心”查看对应的接口权限。</li><li>填写的域名须通过 ICP 备案的验证。</li><li>下载验证文件放到服务器项目根目录中</li></ul><p>步骤二：引入 JS 文件<br>在需要调用 JS 接口的页面引入如下 JS 文件，（支持 https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p><p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.6.0.js">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持 https）。</p><p>备注：支持使用 AMD/CMD 标准模块加载方法加载</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">script:</span> [<br>        &#123;<br>          <span class="hljs-comment">// 分享</span><br><span class="hljs-symbol">          src:</span> <span class="hljs-string">&quot;//res.wx.qq.com/open/js/jweixin-1.6.0.js&quot;</span>,<br><span class="hljs-symbol">          type:</span> <span class="hljs-string">&quot;text/javascript&quot;</span>,<br><span class="hljs-symbol">          charset:</span> <span class="hljs-string">&quot;utf-8&quot;</span>,<br>        &#125;,<br>      ],<br></code></pre></td></tr></table></figure><p>步骤三：通过 config 接口注入权限验证配置<br>所有需要使用 JS-SDK 的页面必须先注入配置信息，否则将无法调用（同一个 url 仅需调用一次，对于变化 url 的 SPA 的 web app 可在每次 url 变化时进行调用,目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题会在 Android6.2 中修复）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wechatParam(<span class="hljs-built_in">this</span>.$axios) <span class="hljs-comment">// 获取微信分享配置</span><br>        .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;&#125;)<br>        .catch(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>          wx.config(&#123;<br>            debug: <span class="hljs-literal">false</span>,<br>            appId: res.appid,<br>            timestamp: res.timestamp,<br>            nonceStr: res.nonceStr,<br>            signature: res.signature,<br>            jsApiList: [<span class="hljs-string">&quot;updateAppMessageShareData&quot;</span>, <span class="hljs-string">&quot;updateTimelineShareData&quot;</span>],<br>          &#125;);<br><br>          wx.checkJsApi(&#123;<br>            jsApiList: [<span class="hljs-string">&quot;updateAppMessageShareData&quot;</span>, <span class="hljs-string">&quot;updateTimelineShareData&quot;</span>], <span class="hljs-comment">// 需要检测的JS接口列表，所有JS接口列表见附录2,</span><br>            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;checkJsApi&quot;</span>);<br>            &#125;,<br>            fail: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;fail&quot;</span>);<br>            &#125;,<br>            complete: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;complete&quot;</span>);<br>            &#125;,<br>          &#125;);<br>          <span class="hljs-comment">//分享给朋友</span><br>          wx.ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//需在用户可能点击分享按钮前就先调用</span><br>            <span class="hljs-keyword">var</span> shareData = &#123;<br>              title: <span class="hljs-string">&quot;2020钢易通金属加工行业交流大会&quot;</span>, <span class="hljs-comment">// 分享标题</span><br>              desc: <span class="hljs-string">&quot;12月19日13:00-17:00 诚邀您参加&quot;</span>,<br>              link: <span class="hljs-built_in">window</span>.location.href, <span class="hljs-comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br>              imgUrl:<br>                <span class="hljs-string">&quot;https://gangyi-h5.oss-cn-hangzhou.aliyuncs.com/img/activity/icon.jpg&quot;</span>, <span class="hljs-comment">// 分享图标</span><br>              success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>                <span class="hljs-comment">// 设置成功</span><br>                <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;success&quot;</span>);<br>              &#125;,<br>              fail: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;fail&quot;</span>);<br>              &#125;,<br>              complete: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;complete&quot;</span>);<br>              &#125;,<br>            &#125;;<br><br>            wx.updateAppMessageShareData(shareData); <span class="hljs-comment">//分享给好友</span><br>            wx.updateTimelineShareData(shareData); <span class="hljs-comment">//分享到朋友圈</span><br>            <span class="hljs-comment">// wx.onMenuShareQQ(shareData); //分享给手机QQ</span><br>            <span class="hljs-comment">// wx.onMenuShareQZone(shareData); //分享到QQ空间</span><br>          &#125;);<br>          wx.error(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res);<br>          &#125;);<br>        &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="分享设置规范"><a href="#分享设置规范" class="headerlink" title="分享设置规范"></a>分享设置规范</h3><ul><li>分享标题：20 字以内，会分两行展示。</li><li>分享图标：建议比例 1:1，可以自动适配</li><li>分享描述：20 字以内，对标题的简要解读，会分两行展示。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以前引用的 1.4.0 的 api 后面可能会停止维护，所以建议直接使用 1.6.0 。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>qq 内部的分享配置没生效 qq 有自己的分享 api <a href="https://open.mobile.qq.com/api/component/share">qq 分享官方文档</a></li><li>可以优化配置为全局方法</li></ul><p>具体信息可以查看<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2">微信分享官方文档</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pm2进行服务端部署总结</title>
    <link href="/2020/11/29/pm2%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/"/>
    <url>/2020/11/29/pm2%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>因为是做平台相关项目，所以对 seo 有要求, 所以考虑 使用 nuxt.js 实现服务端渲染，一个有利于 seo, 还可以提高页面加载速度。<br>本地开发一切顺利，线上部署遇到了以下问题：</p></blockquote><ol><li>构建好的代码放到服务器端，直接 npm run start 终端关掉，进程也会被停掉</li><li>使用 npm run start &amp; 在后台运行， 终端关掉服务正常，但是不能维持稳定的服务，进程还是会挂</li></ol><h2 id="解决方案：pm2，查看官网详细教程"><a href="#解决方案：pm2，查看官网详细教程" class="headerlink" title="解决方案：pm2，查看官网详细教程"></a>解决方案：<a href="https://pm2.keymetrics.io/">pm2，查看官网详细教程</a></h2><blockquote><p>pm2 守护进程管理器，管理和保持应用程序在线，而且可以使用集群模式，根据可用的 CPU 数量进行缩放，这将大大提高应用程序的性能和可靠性</p></blockquote><h2 id="安装并使用-pm2"><a href="#安装并使用-pm2" class="headerlink" title="安装并使用 pm2"></a>安装并使用 pm2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install -g pm<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>使用 pm2 启动 node 服务</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">pm2 start npm -i <span class="hljs-number">0</span> --<span class="hljs-built_in">name</span> mobile --update-env --<span class="hljs-built_in">log</span>-<span class="hljs-built_in">date</span>-<span class="hljs-built_in">format</span> <span class="hljs-string">&#x27;DD-MM HH:mm:sds.SSS&#x27;</span> -- run start —watch<br></code></pre></td></tr></table></figure><p>使用 curl ip + 端口 检查启动是否成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> <span class="hljs-number">127.0.0.1:3000</span><br></code></pre></td></tr></table></figure><p>正常启动后，浏览器 ip + 端口也可以正常访问，最后阿里云做一下域名解析，服务端 nginx 设置一下反向代理就可以使用域名访问了。</p><h3 id="pm2-常用操作"><a href="#pm2-常用操作" class="headerlink" title="pm2 常用操作"></a>pm2 常用操作</h3><p>重启服务</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">pm2 researt <span class="hljs-built_in">all</span>/<span class="hljs-keyword">name</span><br></code></pre></td></tr></table></figure><p>删除服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pm2 <span class="hljs-keyword">delete</span> <span class="hljs-keyword">all</span>/<span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><p>pm2 查看实时的日志输出</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> logs<br></code></pre></td></tr></table></figure><p>pm2 错误日志保存地址</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd <span class="hljs-regexp">/root/</span>.pm2/logs<br></code></pre></td></tr></table></figure><p>终端监视内存和 CPU</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> mo<span class="hljs-symbol">nit</span><br></code></pre></td></tr></table></figure><p>查看列表</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> list<br></code></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>查看端口号是否被占用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">查看3000</span> <span class="hljs-string">端口</span><br><span class="hljs-attr">Mac:</span> <span class="hljs-string">lsof</span> <span class="hljs-string">-i:3000</span><br><span class="hljs-attr">centos:</span> <span class="hljs-string">netstat</span> <span class="hljs-string">-lnp|grep</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>停掉进程</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">kill -<span class="hljs-number">9</span> +<span class="hljs-built_in"> id</span>  // 停掉指<span class="hljs-built_in">定id</span>的进程<br>pkill -<span class="hljs-number">9</span> +<span class="hljs-built_in"> name</span>  // 停掉指<span class="hljs-built_in">定name</span>程序的所有进程<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>直接使用 node server.js 开启服务，修改文件无法热更新，需要关闭进程重新启动</li><li>开发环境可以使用 nodemon 文件修改，进程自动重启</li><li>服务端使用 pm2 直接后台运行服务，不占用终端，文件修改后需要 reload</li></ul><p>目前对于 pm2 的使用可以满足项目需要，但是实现的还是不够优雅，需要再优化一下，后续有更好的实现也会持续更新。如果有不对的，或者各位大佬有好的实现方案，也希望可以不吝赐教（手动抱拳）</p>]]></content>
    
    
    
    <tags>
      
      <tag>pm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连接 VS Code 电脑端进行编辑调试</title>
    <link href="/2020/11/11/autojs/"/>
    <url>/2020/11/11/autojs/</url>
    
    <content type="html"><![CDATA[<blockquote><p>auto.js 一个支持无障碍服务的 Android 平台上的 JavaScript IDE，同时有 VS Code 插件可提供基础的在桌面开发的功能，既可以在手机端直接编写代码，也可以使用 vs code<br>因为习惯使用电脑端开发，所以主要讲解基于 VS Code 插件的桌面开发</p></blockquote><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ol><li>手机端下载 auto.js 电脑端安装 vs code</li><li>vs code 中安装 Auto.js-VSCodeExt 插件</li></ol><h3 id="然后参照插件的说明"><a href="#然后参照插件的说明" class="headerlink" title="然后参照插件的说明"></a>然后参照插件的说明</h3><blockquote><p>Step 1</p><p>按 Ctrl+Shift+P 或点击”查看”-&gt;”命令面板”可调出命令面板，输入 Auto.js 可以看到几个命令，移动光标到命令 Auto.js: Start Server，按回车键执行该命令。此时 VS Code 会在右上角显示”Auto.js server running”，即开启服务成功。</p><p>Step 2</p><p>将手机连接到电脑启用的 Wifi 或者同一局域网中。通过命令行 ipconfig(或者其他操作系统的相同功能命令)查看电脑的 IP 地址。在 Auto.js 的侧拉菜单中启用调试服务，并输入 IP 地址，等待连接成功。</p><p>Step 3</p><p>之后就可以在电脑上编辑 JavaScript 文件并通过命令 Run 或者按键 F5 在手机上运行了。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>autojs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用canvas实现图片压缩上传</title>
    <link href="/2018/10/16/%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E4%B8%8A%E4%BC%A0/"/>
    <url>/2018/10/16/%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目需求： 上传图片前对图片进行压缩减少文件体积<br>需要支持上传图片的格式 png，jpg，gif 因为 canvas 不支持 gif，所以对 gif 不做处理<br>又因为 canvas 的 bolb 方法只支持对 jpeg，和 webp 格式的文件做质量压缩，项目又需要兼容 ie，故只能保存为 jpeg 格式文件</p></blockquote><h2 id="一、上传前压缩图片的好处"><a href="#一、上传前压缩图片的好处" class="headerlink" title="一、上传前压缩图片的好处"></a>一、上传前压缩图片的好处</h2><ul><li>可以减少用户的等待时间，提升使用体验，目前手机拍摄的图片文件大小一般在几 M 左右，文件直接上传时会有卡顿现象。</li><li>可以减少服务端的存储空间</li><li>再次回去图片资源是也可以快速的加载。虽然目前阿里云的 oss 有相对应的 api 可以通过降低图片质量等方法减少体积，不过使用 canvas 可以直接减少源文件的体积。</li></ul><h2 id="二、实现思路以及示例代码"><a href="#二、实现思路以及示例代码" class="headerlink" title="二、实现思路以及示例代码"></a>二、实现思路以及示例代码</h2><ol><li>使用 FileReader 对象获取本地文件（使用文件选择 input 元素）的 base64 内容</li><li>使用 context.drawImage 把获取到的文件画在 canvas 上</li><li>使用 canvas.toBlob 对图片做质量压缩</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对选中的图片文件处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;obj&#125;</span>  </span>event  图片文件</span><br><span class="hljs-comment"> * */</span><br>uploadImg (event) &#123;<br>    <span class="hljs-comment">// 为选择文件返回</span><br>    <span class="hljs-keyword">if</span> (!event.target.files[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">let</span> file = event.target.files[<span class="hljs-number">0</span>],<br>        fileName = file.name.substring(file.name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>).toLowerCase();<br>    <span class="hljs-comment">// 文件格式校验</span><br>    <span class="hljs-keyword">if</span> (fileName != <span class="hljs-string">&quot;jpg&quot;</span> &amp;&amp; fileName != <span class="hljs-string">&quot;png&quot;</span> &amp;&amp; fileName != <span class="hljs-string">&quot;gif&quot;</span> ) &#123;<br>        <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;setPrompt&#x27;</span>, &#123;<span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;请选择正确的图片格式上传(jpg，png，gif)&#x27;</span>&#125;)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// gif图片格式不做处理，其他静态图片做质量压缩处理以减小图片大小</span><br>    <span class="hljs-keyword">if</span> (fileName == <span class="hljs-string">&#x27;gif&#x27;</span>) &#123;<br>        <span class="hljs-built_in">this</span>.uploadApi(file, file.name)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> _this = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-comment">// 压缩图片需要的一些元素和对象</span><br>        <span class="hljs-keyword">let</span> reader = <span class="hljs-keyword">new</span> FileReader(), img = <span class="hljs-keyword">new</span> Image();<br>        reader.readAsDataURL(file);<br>        <span class="hljs-comment">// 缩放图片需要的canvas</span><br>        <span class="hljs-keyword">let</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>        <span class="hljs-keyword">let</span> context = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>        <span class="hljs-comment">// base64地址图片加载完毕后</span><br>        img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 图片原始尺寸</span><br>            <span class="hljs-keyword">let</span> originWidth = <span class="hljs-built_in">this</span>.width;<br>            <span class="hljs-keyword">let</span> originHeight = <span class="hljs-built_in">this</span>.height;<br>            canvas.width = originWidth;<br>            canvas.height = originHeight;<br>            <span class="hljs-comment">// 清除画布</span><br>            context.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, originWidth, originHeight);<br>            <span class="hljs-comment">// 图片压缩</span><br>            context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, originWidth, originHeight);<br>            <span class="hljs-comment">// canvas转为blob并上传</span><br>            canvas.toBlob(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">blob</span>) </span>&#123;<br>                _this.uploadApi(blob, file.name)<br>            &#125;, file.type == <span class="hljs-string">&#x27;image/gif&#x27;</span> ? <span class="hljs-string">&#x27;image/gif&#x27;</span> : <span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-number">0.6</span>);<br>        &#125;<br>        <span class="hljs-comment">// 文件base64化，以便获知图片原始尺寸</span><br>        reader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            img.src = e.target.result;<br>        &#125;;<br>    &#125;<br>&#125;,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传选中的图片文件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;obj&#125;</span>    </span>file  图片文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;string&#125;</span> </span>fileName  文件名称</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-function"><span class="hljs-title">uploadApi</span>(<span class="hljs-params">file, fileName</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> FormData()<br>    formData.append(<span class="hljs-string">&#x27;img&#x27;</span>, file, fileName)<br>    axios.post(<span class="hljs-string">&#x27;/upload/upload-img&#x27;</span>, formData, &#123;<span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>&#125;&#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (res.data.code == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-built_in">this</span>.img_list.splice(<span class="hljs-built_in">this</span>.img_list.length, <span class="hljs-number">1</span>, res.data.url)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;setPrompt&#x27;</span>, &#123;<span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">text</span>: res.data.message&#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>感谢阅读，如有错误，欢迎指正交流。</p><p>参考文档:<br><a href="https://www.zhangxinxu.top/wordpress/2017/07/html5-canvas-image-compress-upload/">HTML5 file API 加 canvas 实现图片前端 JS 压缩并上传</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>canvas js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 常用操作</title>
    <link href="/2017/10/15/vim/"/>
    <url>/2017/10/15/vim/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总结使用 vim 编辑文件的常用操作，后面会持续更新</p></blockquote><h2 id="创建编辑文件"><a href="#创建编辑文件" class="headerlink" title="创建编辑文件"></a>创建编辑文件</h2><ol><li>使用 vim （vi） + 文件名进入文件（如果文件名不存在则默认为新建）</li><li>进入文件后，在英文状态下输入 i(insert)，进入编辑模式。</li><li>需要保存退出的时候先点 esc(英文状态下)退出插入模式。再输入 shift+：进入命令模式。</li></ol><h3 id="对于文件是否有改动分情况对应操作"><a href="#对于文件是否有改动分情况对应操作" class="headerlink" title="对于文件是否有改动分情况对应操作"></a>对于文件是否有改动分情况对应操作</h3><ul><li>文件无改动输入 q 回车</li><li>文件有改动 wq+回车，或者 x+回车，就快捷键按过 esc 之后直接按 shift+ZZ；</li><li>有改动但是不保存，先按 ESC，再输入冒号，在输入命令时，直接输入”q!” 强制退出！</li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>复制的命令是 y，即 yank（提起） ，常用的命令如下：<br>y 在使用 v 模式选定了某一块的时候，复制选定块到缓冲区用；<br>全部复制：按 esc 后，然后 ggyG<br>yy: 复制单行</p><h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><p>剪切的命令是 d，即 delete，d 与 y 命令基本类似，所以两个命令用法一样，包括含有数字的用法.<br> d 剪切选定块到缓冲区；</p><h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><p>粘贴的命令式 p，即 put（放下）<br>p 小写 p 代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>dd:删除游标所在的一整行(常用)<br>ndd:n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除光标所在的向下 20 行<br>d1G:删除光标所在到第一行的所有数据<br>dG:删除光标所在到最后一行的所有数据<br>d$:删除光标所在处，到该行的最后一个字符<br>d0:那个是数字 0,删除光标所在到该行的最前面的一个字符<br>x,X:x 向后删除一个字符(相当于[del]按键),X 向前删除一个字符(相当于[backspace]即退格键)<br>nx:n 为数字，连续向后删除 n 个字符<br>全部删除：按 esc 后，然后 dG</p><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>在复制粘贴时，另一组常用的命令是 u（撤销操作），U（撤销某一行最近所有修改），Ctrl+R（重做），这些功能主要是 vim 中的，vi 中略有差别</p><h2 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h2><p>如想把所有的 buyer 换成 seller</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">%s<span class="hljs-regexp">/buyer/</span>seller/g<br></code></pre></td></tr></table></figure><h2 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h2><p>全选（高亮显示）：按 esc 后，然后 ggvG 或者 ggVG</p><p>gg：是让光标移到首行，在 vim 才有效，vi 中无效<br>v ： 是进入 Visual(可视）模式<br>G ：光标移到最后一行</p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
